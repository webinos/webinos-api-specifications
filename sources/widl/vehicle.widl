/**<p>The webinos vehicle API provides access to specific vehicle data.</p>
 * The design is influenced from W3C's DOM Level 3 Events model and defines event types for retrieving information about the vehicle including trip computer data, gears or park sensors.Further more it exposes information about lights, doors, windows and seating setting. The geolocation, speed and acceleration can be retrieved using the <a href="geolocation.html">geolocation</a> and <a href="deviceorientation.html">device orientation</a> API. The gps navigation related functions (see <a href='http://dev.webinos.org/specifications/draft/vehicle.html'>draft version</a>) have been moved the <a href='navigation.html'>Navigation API</a>.
 * \name Vehicle API
 *
 * 
 *
 * The API exposes vehicle data, which is available on the infotainment vehicle bus (e.g. <a href="http://en.wikipedia.org/wiki/MOST_Bus">MOST</a>). The infotainment bus is usually the access point for the headunit to receveive vehicle data (<a href="http://dev.webinos.org/redmine/attachments/download/666/vehicle_bus_infrastructure.pdf" target="_blank">diagram on vehicle bus architecture</a>). Some data from other busses (high/low speed <a href="http://en.wikipedia.org/wiki/Controller_area_network" target="_blank">CAN</a>) are routed into the bus over the central gateway such as speed or gear.
 
 
 *
 * \def-api-feature http://webinos.org/api/vehicle
 * Identifies the static information about the vehicle 
 *
 * \def-api-feature http://webinos.org/api/vehicle/climate
 * Identifies vehicle data related to climate controls. 
 *
 * \def-api-feature http://webinos.org/api/vehicle/parksensors
 * Identifies park sensor modules of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle/tripcomputer
 * Identifies the trip computer information of a vehicle.
 *
 * \def-api-feature http://webinos.org/api/vehicle/lights
 * Identifies light data of a vehicle
 *
 * \def-api-feature http://webinos.org/api/vehicle/gearbox
 * Identifies gear data
 *
 * \def-api-feature http://webinos.org/api/vehicle/engineoil
 * Identifies information about engine oil level
 *
 * \def-api-feature http://webinos.org/api/vehicle/seating
 * Identifies information about engine oil level
 *
 * \def-api-feature http://webinos.org/api/vehicle/tires
 * Identifies information about the tires
 *
 * \def-api-feature http://webinos.org/api/vehicle/windows
 * Identifies information about the tire pressure
 *
 * \def-api-feature http://webinos.org/api/vehicle/doors
 * Identifies information about the doors
 * 
 * \author Simon Isenberg (BMW Forschung \& Technik) &lt;Simon.Isenberg@bmw.de&gt;
 * \author Corrections relating to inheriting Discovery Service interface &lt;claes1.nilsson@sonymobile.com&gt; 
 * \version 1.0
 */
 
  /**
  * \brief  This is the top-level interface for the Vehicle API.
  * 
  * The VehicleManager interface is a discoverable interface through the webinos Discovery API findServices() method and thus 
  * inherits the Discovery API Service interface.
  */
  interface VehicleManager : Service {
    readonly attribute VehicleInterface vehicle;
  }; 	  

	/**
	* \brief Generic Vehicle Data
	* The interface defines a generic data event for vehicle specific data. It is derived from Event. 
	*/ 
	[NoInterfaceObject]
	interface VehicleData : Event{
	
	};


	/**
	* \brief callback for a failure from get Method
	* \param error a <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> containing information about the error (e.g. SecurityError if permission is denied).
	*
	*/
	callback VehicleErrorCallback = void (DOMError error);
	
	/**
	* \brief callback method to receive vehicle data in a non-recurring and asynchronous way.
	*/ 	
	callback VehicleDataHandler = void (VehicleData data);

	/**
	* \brief Possible values for vehicle fuel 
	*/
	enum Fuel { "unleaded", "premium", "diesel", "electric", "cng" };
	
	/**
	* \brief Possible hybrid types
	*/
	enum Hybrid { "none", "mild", "full"};


	/**
	* \brief Possible positions of the steering wheel
	*/
	enum SteeringWheelPosition {"right", "left"};

	

	/**
	* \brief Possible values for transmission type 
	*/
	enum VehicleTransmission { "transmission-automatic", "transmission-manual" };
	
	/**
	* \brief The interface defines general information about the vehicle and is the object, where the event listener for vehicle related data can be registered. 
	* 
	*/
	[NoInterfaceObject]
	interface VehicleInterface : EventTarget {
		/**
		* \brief Attribute denotes brand name of the vehicle.
		*/					
		readonly attribute DOMString brand;
		/**
		* \brief Attribute reflects model name of the vehicle.
		*/		
		readonly attribute DOMString model;
		/**
		* \brief Attribute denotes production year of the vehicle.
		*/		
		readonly attribute DOMString year;
		/**
		* \brief Attribute reflects fuel type of the vehicle.
		*/		
		readonly attribute Fuel fuel;
		/**
		* \brief Attribute reflects hybrid type of the vehicle
		*/		
		readonly attribute Hybrid hybrid;
		/**
		* \brief Attribute reflects steering wheel position
		*/		
		readonly attribute SteeringWheelPosition steeringwheel;
		/**
		* \brief Attribute denotes transmission type of the vehicle.
		*/		
		readonly attribute VehicleTransmission transmission;
		/**
		* \brief Method allows to request vehicle data in a non-recurring way and is independant from value changes (cf. events). The same identifiers  are used for vehicle data as well as for the different vehicle events (ClimateControlEvent, ControlEvent, NavigationEvent, ParkSensorsEvent, ShiftEvent). 
		* \code
    * // vehicleService is the vehicle service, discovered through the webinos Discovery API, that has been selected by the user		
		* vehicleService.vehicle.get("climate-all", dataHandler);
		* function dataHandler(data){
		*	if(data.acStatus){
		* 		console.log("Airconditioning is on");
		*		if(data.desiredTemperature \< 19){
		*			console.log("This is not so good for your health");
				}
		*	}
		* }
		* \endcode

		* \param vehicleDataId Parameter specifies the type of data, which shall be retrieved. The identifiers for the different data types are defined in the different vehicle event interfaces (ClimateControlEvent, ControlEvent, NavigationEvent, ParkSensorsEvent, ShiftEvent, StatusDataEvent). The identifiers are defined as values of the various enums: ClimateZone, VehicleLight, DestinationEventType, ParkSensorPosition, VehicleStatusComponents. 
		* \param handler Parameter specifies the function to handle the result.
		* \param errorCB Parameter specifies the callback function in case of an error.
		*/
		void get(VehicleDataType vehicleDataId, VehicleDataHandler handler, VehicleErrorCallback errorCB);
	};

	/**
	* \brief Climate zone names
	*/
	enum VehicleClimateZone { "all", "driver", "passenger", "behind-driver", "behind-passenger"};
	
	/**
	* \brief The interface defines a climate control event. 
	* The event provides information about changes to the climate control system inside the vehicle.
	* \code
	*
  * // vehicleService is the vehicle service, discovered through the webinos Discovery API, that has been selected by the user		
	* vehicleService.vehicle.addEventListener("climate", climateHandler, null);
	* function climateHandler(data){
	*		console.log(data.zone + " desired temperature is " + data.desiredTemperature + "Â° C"); 		
	*	}				
	* \endcode
	*/
	[NoInterfaceObject]
	interface ClimateControlData : VehicleData{
		/**
		* \brief Attribute defines the zone of the climate control event.
		*/	
		readonly attribute VehicleClimateZone zone;
		/**
		* \brief Attribute defines the desired temperature in degree celsius.
		*/	
		readonly attribute unsigned short desiredTemperature; 
		/**
		* \brief Attribute defines, if the AC switched on or not.	
		*/	
		readonly attribute boolean acStatus;
		/**
		* \brief Attribute defines the level of the vents. This value can be 1-9.  	
		*/	
		readonly attribute unsigned short ventLevel;
		/**
		* \brief Attribute defines if the vent is used in automatic mode or not. 	
		*/	
		readonly attribute boolean ventMode;
		/**
		* \brief Method is used to set initial values of a climate control event.
		* \param bubbles True if event bubbles.
		* \param cancelable True if event is cancelable.
		* \param zone zone where event climate settings have been changed.
		* \param desiredTemperature desired temperature in degree celsius.
		* \param acStatus true if the air conditioning is running.
		* \param ventLevel level of the vent.
		* \param ventMode true, if the vent is in automatic mode.
		*/
		void initClimateControlData(boolean bubbles, boolean cancelable, DOMString zone, short desiredTemperature, boolean acStatus, short ventLevel, short ventMode);
	};

	/**
	* \brief Type of vehicle light
	*/
	enum VehicleLight { "fog-front", "fog-rear", "signal-left", "signal-right", "signal-warn", "parking", "hibeam", "head" };

	
	/**
	* \brief The interface defines a light data. 
	* The event signals a change for a light unit inside the vehicle. The identifiers for the different light events are defined in the enum VehicleLight.
	* \code
  * // vehicleService is the vehicle service, discovered through the webinos Discovery API, that has been selected by the user		
	*	vehicleService.vehicle.addEventListener("light-hibeam", lightHandler, false);
	*      function lightHandler(cEvent){
	*		if(cEvent.controlId == "hibeam"){
	*			if(cEvent.active == true){
	*				console.log("Hibeam turned on");
	*			}else{
	*				console.log("Hibeam turned off");
	*			}
	*		}
	*	}
	* \endcode
	*/
	interface LightData : VehicleData{
		/**
		* \brief Attribute describes the source of the event.
		*/	
		readonly attribute VehicleLight lightId;
		/**
		* \brief Attribute describes the status of the light unit.	
		*/	
		readonly attribute boolean active;
		/**
		* \brief Method sets initial values of a control event.
		* \param lightId specifies the control unit.
		* \param active specifies if the unit is activated or not.
		*/
		void initLightData(VehicleLight lightId, boolean active);
	};

	/**
	*  \brief Position of park sensors
	*/
	enum ParkSensorPosition { "front", "rear"};

	/**
	* \brief This interface defines an data related to the built-in park sensors. 
	* A listener can be registered by vehicle.addEventLister("parksensor-front",listener,false).
	* \code
  * // vehicleService is the vehicle service, discovered through the webinos Discovery API, that has been selected by the user		
	*	vehicleService.vehicle.addEventListener("parksensor-front", psHandler, false);
	*	vehicleService.vehicle.addEventListener("parksensor-rear", psHandler, false);
	*	function psHandler(psEvent){
	*		if(psEvent.left == 20){
	*			console.log("obstacle on the left in" + psEvent.position + " is close");
	*		}
	*	}
	* \endcode
	*/
	interface ParkSensorsData : VehicleData{
		/**
		* \brief Attribute defines the position of the sensor.
		*/
		readonly attribute ParkSensorPosition position;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the left side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/    		
		readonly attribute unsigned short left;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the middle left side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short midLeft;	
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the middle right side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short midRigth;
		/**
		* \brief Attribute reflects the destination to an object sensed by the sensor on the rigth side in centimeters. Minimum distance is 20 centimeters. Maximum distance is 250 centimeters. A value of -1 indiactes that no object has been sensed.
		*/
		readonly attribute unsigned short rigth;
		/**
		* \brief Method sets initial values of a park sensors event.
		* \param position position of the sensors: front or rear.
		* \param left data from the outer left sensor.
		* \param left data from the left sensor.
		* \param midLeft data from the middle left sensor.
		* \param midRight data from the middle right sensor.
		* \param right data from the right sensor.
		* \param outRight data from the outer right sensor.
		*/
		void initParkSensorsData(ParkSensorPosition position, short outLeft ,short left, short midLeft, short midRight, short right, short outRight);
	};

	/**
	* \brief The interface defines a trip computer data. 
	* A listener can be registered by vehicle.addEventLister("tripcomputer",listener,false).
	*
	* \code
	*var latestConsumption = 0;
  * // vehicleService is the vehicle service, discovered through the webinos Discovery API, that has been selected by the user		
	*vehicleService.vehicle.addEventListener("tripcomputer", tripDataHandler, false);
	*      
	*function tripDataHandler(data){
	*	//Calculating, if the fuel efficiency increased, since the last update
	*	var gap = latestConsumption - data.averageConsumption;
	*	if(gap \< 0){
	*	    console.log("Thumbs down. You decreased your fuel efficiency");
	*	} else if (gap > 0){
	*	    console.log("Thumbs up. You increased your fuel efficiency");
	*	} else {
	*	    console.log("nothing changed");
	*	}
	*	latestConsumption = data.averageConsumption;
	*      
	*	if (data.range \< 20){
	*	    console.log("You really need " + vehicleService.vehicle.fuel + "soon.");	
	*	}
	*}
	* \endcode
	*/
	interface TripComputerData : VehicleData{
		/**
		* \brief Attrubute reflects the overall average consumption of the vehicle in l/100kilometers (resets on driver's demand).
		*/		
		readonly attribute float averageConsumption;
		/**
		* \brief Attrubute reflects the average consumption of the vehicle in l/100kilometers on the ongoing journey (resets automatically).
		*/		
		readonly attribute float tripConsumption;
		/**
		* \brief Attrubute reflects the overall average speed of the vehicle in kilometers per hour (resets on driver's demand).
		*/
		readonly attribute float averageSpeed;
		/**
		* \brief Attrubute reflects average speed of the vehicle in kilometers per hour on the current trip (resets automatically).
		*/		
		readonly attribute float tripSpeed;
		/**
		* \brief Attrubute reflects trip distance in kilometers.
		*/
		readonly attribute float tripDistance;
		/**
		* \brief Attrubute reflects mileage in kilometers.
		*/
		readonly attribute float mileage;
		/**
		* \brief Attrubute reflects the range of the vehicle in kilometers.
		*/
		readonly attribute float range;
		/**
		* \brief Method sets the initial values of a trip computer event.
		*
		* \param averageConsumption overall average consumption of the vehicle in l/100kilometers.
		* \param tripConsumption average consumption of the vehicle in l/100kilometers on the current trip.
		* \param averageSpeed average speed of the vehicle in kilometers per hour. 
		* \param tripSpeed average speed  of the vehicle in kilometers per hour on the current trup. 
		* \param tripDistance distance of the current trip in kilometers.
		* \param mileage overall driven distance in kilometers.
		* \param range range of the vehicle in kilometers. 
		*/
		void initTripComputerData(float averageConsumption, float tripConsumption, float averageSpeed, float tripSpeed, float tripDistance, float mileage, float range);
	};
	
	/**
	* \brief This interface defines a gear data. 
	* A listener can be registered by vehicle.addEventLister("gear",listener,false).
	* \code
	* // registering an Event for a Shift. vehicleService is the vehicle service, discovered through the webinos Discovery API, 
	* //that has been selected by the user	
	* vehicleService.vehicle.addEventListener("gear", shiftHandler);
	* function shiftHandler(e){
	*   document.getElementById("info").innerHTML = e.gear;
	*  vehicleService.vehicle.removeEventListener("shift", shiftHandler);
	* }				
	* \endcode
	*/
	interface GearData : VehicleData{
		/**
		* \brief Attribute reflects the current gear.
		*/
		attribute Gear gear;
		
		/**
		* \brief Method sets the value of the current gear.
		*
		* \param gear defines the value of the current gear. 
		*/
		void initGearData(Gear gear);		
	};
	

	/**
	* \brief Vehicle gears
	* 
	* supported gear values
	*/
	enum Gear {"R","P","N", "1", "2", "3", "4", "5", "6", "7", "8", "10"};
	
	/**
	* \brief Status of the wipers switch
	* defines the different positions of the wiper switch
	*/
	enum WiperStatus { "front-wash", "rear-wash", "automatic", "front-once", "rear-once", "front-level1", "front-level2", "notactive" };
	
	/**
	* \brief This interface defines wiper data. 
		* A listener can be registered by vehicle.addEventLister("gear",listener,false).
	* \code
	* // requesting the status of the wiper stick. vehicleService is the vehicle service, discovered through the webinos Discovery API, 
	* // that has been selected by the user	
	* vehicleService.vehicle.get("wipers", wiperHandler);
	* function wiperHandler(e){
	*   document.getElementById("info").innerHTML = e.position;
	* }				
	* \endcode
	*/
	interface WiperData : VehicleData{
		/**
		* \brief Attribute defines the position of the wiper stick.
		*/
		attribute WiperStatus position;
		/**
		* \brief Method sets the initial values of a wiper data.
		*
		* \param position defines the position of the wiper stick.
		*/
		void initWiperData(WiperStatus position);
	};
	
	/**
	* \brief This interface defines a engine oil data. 
	*/
	interface EngineOilData : VehicleData{
		/**
		* \brief Attribute defines the level of the oil in the engine.
		*/
		attribute EngineOilLevel level;
		/**
		* \brief Method sets the initial values of a engine oil data.
		*
		* \param level defines the level of the oil in the engine.
		*/
		void initEngineOilData(EngineOilLevel level);	
	};
	
	/**
	* \brief Levels of engine oil
	* defines the different levels of engine oil.
	*/
	enum EngineOilStatus { "OVER_MAX","MAX", "OK", "MIN", "UNDER_MIN", "MEASURING"};



	/**
	* \brief The interface defines the current setting of a given part of a seat.
	*
	*/ 
	dictionary SeatSetting{
		/**
		* \brief relevant seat part
		*/
		SeatOption option;
		/**
		* \brief value of the specified seat part
		*/
		Long value; 
	};
	
	/**
	* \brief The interface defines a seating data.
	*/
	interface SeatData : VehicleData{
		readonly attribute SeatPosition position;
		readonly attribute SeatSetting[] settings;
		/**
		* \brief Method sets the initial values of a vehicle status event.
		*
		* \param position defines the position of the seat.
		* \param settings defines the settings of the different seat parts.
		*/
		void initSeatData(SeatPosition position, SeatSetting[] settings);
	};
	
	/**
	* \brief seat position.
	* defines the different positions of a seat
	*/
	enum SeatPosition { "driver","frontpassaneger", "behindDriver", "behindPassenger"};
	
	/**
	* \brief seat option.
	* defines the different parts of a seat, which can be customized
	*/
	enum SeatOption { "recline-seatback","slide", "cushion-heigh", "headrest", "back-cushion", "side-cushion"};

	/**
	* \brief The interface defines a tire pressure data.
	*/
	interface TirePressureData : VehicleData{
		/**
		* \brief Attribute reflects the pressure of the front left tire in bar.
		*/		
		readonly attribute unsigned short frontLeft;
		/**
		* \brief Attribute reflects the pressure of the front right tire in bar.
		*/		
		readonly attribute unsigned short frontRight;
		/**
		* \brief Attribute reflects the pressure of the rear left tire in bar.
		*/		
		readonly attribute unsigned short rearLeft;
		/**
		* \brief Attribute reflects the pressure of the rear left tire in bar.
		*/	
		readonly attribute unsigned short rearRight;
		/**
		* \brief Method sets the initial values of tire pressure data.
		*
		* \param frontLeft defines the tire pressure of tire at the front left side of the vehicle.
		* \param frontRight defines the tire pressure of tire at the front right side of the vehicle.
		* \param rearLeft defines the tire pressure of tire at the rear left side of the vehicle.
		* \param rearRight defines the tire pressure of tire at the rear right side of the vehicle.

		*/
		void initTirePressureData(Short frontLeft, Short frontRight,Short rearRight,Short rearLeft);
	};
	
	/**
	* \brief The interface defines door data.
	* \code
	* // checking if driver door is openend. vehicleService is the vehicle service, discovered through the webinos Discovery API, 
	* // that has been selected by the user	
	* vehicleService.vehicle.addEventListener("doors", doorHandler);
	* function doorHandler(doors){
	*  if(doors.driver){
	*  	document.getElementById("info").innerHTML = 'Please close driver door';
	*  }  
	* }				
	* \endcode
	*/
	interface DoorData : VehicleData{
		/**
		* \brief Attribute reflects if driver door is opened (true) or closed (false)
		*/		
		readonly attribute boolean driver;
		/**
		* \brief  Attribute reflects if front passenger door is opened (true) or closed (false)
		*/		
		readonly attribute boolean? frontPassenger;
		/**
		* \brief  Attribute reflects if the door behind the driver is opened (true) or closed (false)
		*/		
		readonly attribute boolean? behindDriver;
		/**
		* \brief  Attribute reflects if the door behind the front passenger is opened (true) or closed (false).
		*/		
		readonly attribute boolean? behindPassenger;
		/**
		* \brief  Attribute reflects if the trunk deck is opened (true) or closed (false). 
		*/		
		readonly attribute boolean? trunkDeck;
		
		
		/**
		* \brief Method sets the initial values of a vehicle status event.
		*
		* \param driver defines status of driver door.
		* \param frontPassenger defines status of front passenger door.
		* \param behindDriver defines status of door behind driver.
		* \param behindPassenger defines status of door behind front passenger.
		* \param trunkDeck defines status of trunk deck.
		*/
		void initDoorData(boolean driver, boolean frontPassenger,boolean behindDriver,boolean behindPassenger,boolean trunkDeck);
	};
	
		/**
	* \brief The interface defines window data.
	* WindowData exposes the information of the current position of the different windows of a vehicle.
	* \code
	* // checking if driver window is openend. vehicleService is the vehicle service, discovered through the webinos Discovery API, 
	* // that has been selected by the user	
	* vehicleService.vehicle.addEventListener("windows", windowHandler);
	* function windowsHandler(windows){
	*  if(windows.driver == 0){
	*  	document.getElementById("info").innerHTML = 'Window is closed';
	*  } else{
	*   document.getElementById("info").innerHTML = 'Driver window is opened to ' + window.driver + '%' ;
	*  }
	* }				
	* \endcode
	*/
		interface WindowData : VehicleData{
		/**
		* \brief Attribute reflects the position of the driver window (100 = open; 0 = closed)
		*/		
		readonly attribute unsigned short driver;
		/**
		* \brief  Attribute reflects the position of the front passenger window (100 = open; 0 = closed)
		*/		
		readonly attribute unsigned short? frontPassenger;
		/**
		* \brief  Attribute reflects the position of the window behind the driver  (100 = open; 0 = closed)
		*/		
		readonly attribute unsigned short? behindDriver;
		/**
		* \brief  Attribute reflects the position of the window behind front passenger (100 = open; 0 = closed)
		*/		
		readonly attribute unsigned short? behindPassenger;
		
		
		/**
		* \brief Method sets the initial values of a vehicle status event.
		*
		* \param driver defines position of the driver window.
		* \param frontPassenger defines position of the front passenger window.
		* \param behindDriver defines position of the .
		* \param behindPassenger defines the position of the window behind the front passenger.
		*/
		void initWindowData(boolean driver, boolean frontPassenger,short behindDriver,short behindPassenger);
	};
	
	
	/**
	* \brief Vehicle event types
	* defines the possible vehicle data, which can be retrieved using the addEventListener or the get method.
	*/
	enum VehicleDataType {"gear","tripcomputer","parksensors-front", "parksensors-rear", "engineoil","wipers","tirepressure","doors", "windows", "climate-all", "climate-driver", "climate-behind-driver", "climate-passenger", "climate-behind-passenger", "light-fog-front", "light-fog-rear", "light-signal-left", "ligth-signal-right", "light-signal-warn", "light-parking", "light-hibeam", "light-head", "seat-driver", "seat-passenger", "seat-behind-driver", "seat-behind-passenger"};
	