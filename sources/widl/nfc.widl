/**<p> Near Field Communication (NFC) support.</p> 
 * \name NFC API
 *
 * Near Field Communication (NFC) is an international standard (ISO/IEC 18092) 
 * that specifies an interface and protocol for simple wireless interconnection 
 * of closely coupled devices operating at 13.56 MHz. 
 * (<a href="http://www.nfc-forum.org/specs/spec_list/">http://www.nfc-forum.org/specs/spec_list/</a>). There are three groups of 
 * application scenarios for NFC: The first one is to hold a device close 
 * to a wireless tag to exchange some digital information or data. The second 
 * is to hold two devices close to each other in order to exchange some 
 * information or data between them. The third one is to make payments by 
 * holding mobile phones close to point of sales terminals instead of 
 * swiping smart cards.
 *
 * \def-api-feature http://webinos.org/api/nfc
 * Acccess to all the module. This feature provides access to the whole API.
 *
 * \def-api-feature http://webinos.org/api/nfc/read
 * Acccess to all the module except write operations.
 *
 * \author Dave Raggett (W3C) &lt;dsr@w3.org&gt;
 * \author Hans Myrhaug (AmbieSense Ltd.) &lt;hans@ambiesense.com&gt;
 * \author Stefano Vercelli (Telecom Italia) &lt;stefano.vercelli@telecomitalia.it&gt;
 * \author WIDL format created by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 *
 * \version 1.5
 */

/**
* \brief Creates the webinos.nfc namespace.
*
*/

partial interface Webinos  {
  readonly attribute NFC nfc;
};

    /**
   * \brief The NFCinterface
   *
   * This interface provides a variety of means for adding listeners for NFC tags, setting the device into a sharing mode, and helper methods for dealing with NDEF records.
   *
   * <b>Introduction</b>
   * 
   * It is becoming increasingly common for smart phones and other devices to include support for NFC. NFC Tags are inexpensive and widely used. There are many potential applications, e.g. here are just a few:
   *  
   *  <ul>
   * <li>    Electronic payments (tap to pay)</li>
   * <li>     Exchange of contact details (an electronic business card)</li>
   * <li>     Exchange of security credentials e.g. for a WiFi network</li>
   * <li>     Credentials for induction of a new device into a user's Personal Zone</li>
   * <li>    Tap to play - automatic induction into a multiplayer game</li>
   * </ul>
   * 
   * The phase 2 NFC API provides for a range of capabilities.
   * <ul>
   * <li>    The means to register listeners for the presence of NFC Tags </li>
   * <li>    The means to read and write NDEF records to NFC Tags</li>
   * <li>   The means to set Tags to prevent further write operations</li>
   * <li>    The means to configure a NFC device to push NDEF messages to other such devices</li>
   * <li>    The means to establish a temporary bidirectional asynchronous message channel</li>
   * </ul>
   * 
   * This specification starts with some informative examples for how the API can be used. The next section deals with the normative definition of the API and is followed by the full WebIDL definition of API. The specification closes with acknowledgements and references.
   *   
   * <b>Listen</b>
   * 
   * To set up an event listener for an NFC Tag:
   * 
   * Webinos.nfc.addListener(listener, success, fail);
   * 
   * \code
   * function listener (event)
   * {
   *   var tag = event.tag;  // object proxying the NFC Tag
   *   console.log("tag technology: " + tag.tech);
   *   tag.close = function () {
   *     console.log("lost contact with the Tag");
   *   };
   * }
   * 
   * function success ()
   * {
   *   console.log("successfully registered NFC event listener");
   * }
   * 
   * function fail ()
   * {
   *   console.log("failed to register NFC event listener");
   * }
   * \endcode
   * 
   * The tag.tech field is a string identifying the kind of NFC Tag:
   * 
   * <ul>
   * <li>    OTHERS  </li>
   * <li>    NFCA </li>
   * <li>    NFCB </li>
   * <li>    NFCF </li>
   * <li>    NFCV </li>
   * <li>    ISODEP </li>
   * <li>    NDEF </li>
   * </ul>
   * 
   * If the Tag is an NDEF Tag, the ndefMessage property can be used to access the NDEF records:
   * 
   * \code
   *   var records = tag.ndefMessage || [];
   * 
   *   for (var i = 0; i < records.length; ++i
   *   {
   *     var record = records[i];
   *     console.log("Record: " + i);
   *     console.log("type: " + record.type);
   *     console.log("id: " + record.id);
   *     console.log("payload: " + Webinos.nfc.bytesToString(record.payload));
   *     console.log("");
   *   }
   * \endcode
   * 
   * As a convenience to developers, you can also register for events for Tags with specific NDEF record types:
   * 
   * \code
   *   // register for Tags with VCARD data
   *   Webinos.nfc.addMimeTypeListener("text/vcard", listener, success, fail);
   * 
   *   // register for Tags with URIs, e.g. for pointers to websites
   *   Webinos.nfc.addURITypeListener(listener, success, fail);
   * \endcode
   *  
   * <b>Writing</b>
   * 
   * To write to a tag having discovered one:
   * 
   * \code
   * // called when the Tag is discovered
   * function listener (event)
   * {
   *   var nfc = Webinos.nfc;
   * 
   *   // read the tag here if you want ...
   * 
   *   // prepare an NDEF message
   *   var message = [
   *     nfc.textRecord("Have a nice day!");
   *   ];
   * 
   *   // and write it back to the Tag
   *   event.tag.write(message, success, fail);
   * }
   * 
   * function success ()
   * {
   *   console.log("successfully wrote message to Tag");
   * }
   * 
   * function fail ()
   * {
   *   console.log("failed to write message to Tag");
   * }
   * \endcode
   * 
   * 
   * There could be more than one Tag in range, e.g. you might have several in your wallet. This approach allows you to write back to the same Tag that you just read.
   * 
   * <b>Set Read Only</b>
   * 
   * To prevent further modifications to a Tag you can do the following:
   * 
   * 
   * \code
   *   tag.makeReadOnly(success, fail);
   * 
   * ...
   * 
   * function success ()
   * {
   *   console.log("successfully make Tag read-only");
   * }
   * 
   * function fail ()
   * {
   *   console.log("failed to make Tag read-only");
   * }
   * \endcode
   * 
   * 
   * <b> Push </b>
   * 
   * How to determine when it is reasonable to exit sharing mode? Is there a way to determine that the other device has moved out of range? Or perhaps an acknowledgement that it read the shared data?
   * 
   * You can set your NFC device, e.g. a smart phone to push an NDEF message to another such device. The first step is to prepare the message. You then call the shareTag method to enter the sharing mode:
   * 
   * \code
   * // called when the Tag is discovered
   * function listener (event)
   * {
   *   var nfc = Webinos.nfc;
   * 
   *   // prepare an NDEF message
   *   var message = [
   *     nfc.uriRecord("http://www.example.com/");
   *   ];
   * 
   *   // and write it back to the Tag
   *   nfc.shareTag(message, success, fail);
   * }
   * 
   * function success ()
   * {
   *   console.log("entered NFC sharing mode");
   * }
   * 
   * function fail ()
   * {
   *   console.log("failed to enter NFC sharing mode");
   * }
   * \endcode
   * 
   * Some time later, you call the unshareTag method to restore your device to normal mode of operation where it is listening for NFC Tags that come in range:
   * 
   * \code
   *   nfc.unshareTag(success, fail);
   * 
   * ...
   * 
   * function success ()
   * {
   *   console.log("exited NFC sharing mode");
   * }
   * 
   * function fail ()
   * {
   *   console.log("error on exiting NFC sharing mode");
   * }
   * \endcode
   * 
   * <b>Peer to Peer Communications with LLCP</b>
   * 
   * The Link Logical Control Protocol (LLCP) can be used to set up an HTML Message Channel for a temporary bidirectional aysnchronous connection. Message Channels are part of HTML5
   * 
   *     <a href="http://www.w3.org/TR/html5/comms.html">HTML5 MessageChannel</a>
   * 
   * Here is a simple example:
   * 
   * \code
   *   // first set phone into peering mode
   *   Webinos.nfc.peer(success, fail);
   * 
   * function success (channel)
   * {
   *   console.log("successfully initiated peering mode");
   * 
   *   // to send a message to the other device
   *   channel.port1.postMessage('hello');
   * 
   *   // to receive a message from the other device
   *   // first you set a message handler
   *   channel.port1.onmessage = handleMessage;
   * 
   *   // you next instruct the channel to dispatch events
   *   // you can later close the port with the stop() method
   *   // your device then reverts to its normal mode
   *   channel.port1.start();
   * }
   * 
   * function handleMessage(event)
   * {
   *   // message is in event.data
   *   // ...
   * }
   * 
   * // after a time out when peering couldn't be established
   * function fail ()
   * {
   *   console.log("failed to initiate peering mode");
   * }
   * \endcode
   * 
   */


interface NFC {

        /**
       * \brief This is a method for registering a call back for all NFC tag technologies.
       *
       * It makes use of the success and failure call back pattern. These call backs are defined in a subsequent section.
       *
       * \param listener Callback issued when an update occurs
       * \param success Callback issued when listener has been successfully added
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void addListener(NfcEventCallBack listener,
      SuccessCallBack success, FailCallBack fail);

        /**
       * \brief This is a method for registering a call back for NFC tags with NDEF text records.
       *
       * It makes use of the success and failure call back pattern. These call backs are defined in a subsequent section.
       *
       * \param listener Callback issued when an update occurs
       * \param success Callback issued when listener has been successfully added
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void addTextTypeListener(NfcEventCallBack listener,
      SuccessCallBack success, FailCallBack fail);

        /**
       * \brief This is a method for registering a call back for NFC tags with NDEF URI records.
       *
       * It makes use of the success and failure call back pattern. These call backs are defined in a subsequent section.
       *
       * \param listener Callback issued when an update occurs
       * \param success Callback issued when listener has been successfully added
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void addUriTypeListener(NfcEventCallBack listener,
      SuccessCallBack success, FailCallBack fail);

        /**
       * \brief This is a method for registering a call back for NFC tags with NDEF MIME content records with a specific MIME type, e.g. "text/vcard", which is used for an electronic equivalent of a business card.This is a method for registering a call back for NFC tags with NDEF URI records.
       *
       * It makes use of the success and failure call back pattern. These call backs are defined in a subsequent section.
       *
       * \param mimeType Specific MIME type to listen for
       * \param listener Callback issued when an update occurs
       * \param success Callback issued when listener has been successfully added
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void addMimeTypeListener(DOMString mimeType,
      NfcEventCallBack listener, SuccessCallBack success, FailCallBack fail);

        /**
       * \brief This is a method for setting a device into a sharing mode for pushing an NDEF message to another NDEF device.
       *
       * It makes use of the success and failure call back pattern. These call backs are defined in a subsequent section.
       *
       * \param message NDEF message to push
       * \param success Callback issued when message has been successfully pushed
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void shareTag(NfcNdefRecord[] message, SuccessCallBack success, FailCallBack fail);

        /**
       * \brief This method is used after the shareTag method, and sets the device back to the default mode in which it listens for the presence of NFC tags.
       *
       * It makes use of the success and failure call back pattern. These call backs are defined in a subsequent section.
       *
       * \param success Callback issued when mode has been set back to default
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void unshareTag(SuccessCallBack success, FailCallBack fail);


        /**
       * \brief This method is used to establish a bidirectional channel with another NFC device for asynchronous exchange of data.
       * 
       * It makes use of the success and failure call back pattern. These call backs are defined in a subsequent section.
       * 
       * This method is used to establish a bidirectional channel with another NFC device for asynchronous exchange of data. It makes use of the Link Logical Control Protocol and exposes it as an HTML MessageChannel, see:
       * 
       *     <a href="http://www.w3.org/TR/html5/comms.html">http://www.w3.org/TR/html5/comms.html</a>
       * 
       * Each message channel exposes a pair of ports. The first port represents the local end of the channel, and the second port represents the remote end of the channel. Messages are posted between ports using the postMessage method. Messages can be strings or other kinds of JavaScript objects, and are serialized and reassembled automatically as structured clones, see:
       * 
       *    <a href="http://www.w3.org/TR/html5/common-dom-interfaces.html#structured-clone">http://www.w3.org/TR/html5/common-dom-interfaces.html#structured-clone</a>
       * 
       * You can register a listener for notifications of incoming data. The channel is closed by calling the close method on the ports exposed by the message channel. For more details see the above link to the specification of the HTML MessageChannel.
       *
       * \param success Callback issued when message channel has been established
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void peer(LLCPCallBack success, FailCallBack fail);



  // methods for creating NDEF records
      /**
       * \brief This method creates an NDEF record from a string
       *
       * \param text Text used for creating the NDEF
       * \return NfcNdefRecord  The created NDEF record
       */
  NfcNdefRecord textRecord(DOMString text);
      /**
       * \brief This method creates an NDEF record from a URI
       *
       * \param uri URI used for creating the NDEF
       * \return NfcNdefRecord  The created NDEF record
       */
  NfcNdefRecord uriRecord(DOMString uri);
      /**
       * \brief This method creates an NDEF record from a MIME type and a byte array representing data of that tyoe
       *
       * \param mimeType MIME type the data is in
       * \param data Data in the format indicated by the MIME type
       * \return NfcNdefRecord  The created NDEF record
       */
  NfcNdefRecord mimeRecord(DOMString mimeType, byte[] data);

      /**
       * \brief This is a helper method for converting strings to byte arrays for use in NDEF messages.
       *
       * This is a helper method for converting strings to byte arrays for use in NDEF messages. It maps 16 bit Unicode characters into a byte array in the big-endian manner with the most significant byte appearing first.
       *
       * \param string String to convert 
       * \return byte[] Resulting byte array for NDEF message use
       */
  byte[] stringToBytes(DOMString string);

      /**
       * \brief This is a helper method for converting byte arrays from NDEF messages into strings.
       *
       * This is a helper method for converting byte arrays from NDEF messages into strings. This performs the inverse mapping from stringToBytes, and maps a big-endian byte array into a JavaScript string consisting of 16 bit unicode characters.
       *
       * \param data NDEF style byte array
       * \return DOMString Converted NDEF data in text
       */
  DOMString bytesToString(byte[] data);
};


      /**
       * \brief This is a call back for notifying the presence of NFC tags. 
       *
       */
callback NfcEventCallBack = void (NfcNdefEvent event);

      /**
       * \brief This is a call back for notifying the success of an operation such as registering a listener for the presence of NFC tags.
       *
       */
callback SuccessCallBack = void ();

      /**
       * \brief This is a call back for notifying the failure of an operation such as registering a listener for the presence of NFC tags.
       *
       */
callback FailCallBack = void ();

      /**
       * \brief This is a call back for notifying when a message channel has been established with another NFC device via the Link Logical Control Protocol.
       *
       */
callback LLCPCallBack = void (MessageChannel channel);


      /**
       * \brief The NFC event has a single property -- the NFC Tag
       *
       */
interface NfcNdefEvent : DOMEvent {
  readonly attribute NfcTag tag; 
};


      /**
       * \brief he NFCTag interface defines properties and methods for NFC tags.
       *
       */
interface NfcTag {
  readonly attribute NfCTagTech tech;  
  readonly attribute NfcNdefRecord[] ndefMessage;

  attribute CloseCallBack close;

      /**
       * \brief This method can be called on an open NFC tag to write an NDEF message. It will fail if the tag is read-only.
       *
       * \param ndefMessage Message to write to the NFC tag
       * \param success Callback issued when message has been written
       * \param fail Callback issued if an error occurs 
       * \return void
       */

  void write(NfcNdefRecord[] ndefMessage,
             SuccessCallBack success, FailCallBack fail);

      /**
       * \brief This method can be called on an open NFC tag to set it to read-only.
       *
       * \param success Callback issued when NFC tag has been set to read-only.
       * \param fail Callback issued if an error occurs 
       * \return void
       */
  void makeReadOnly(SuccessCallBack success, FailCallBack fail);
};


      /**
       * \brief This is a call back that indicates that a NFC tag is no longer accessible, e.g. because the user has pulled the tag away from the reader.
       *
       */
callback CloseCallBack = void ();



        /**
        * \brief This is an enumeration of string constants for the various kinds of NFC technologies that are generally supported by NFC devices.
        */
          enum NfCTagTech {"OTHERS", "NFCA", "NFCB", "NFCF", "NFCV", "ISODEP", "NDEF"};

// the properties for NDEF records
// definitions come from the NFC Forum

      /**
       * \brief An NDEF message is an array of records as defined above.
       *
       */
interface NfcNdefRecord {
  readonly attribute DOMString tnf;
  readonly attribute DOMString type;
  readonly attribute DOMString id;
  readonly attribute byte[] payload;
};
      
