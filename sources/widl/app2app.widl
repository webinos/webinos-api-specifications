/**<p>Interface for exchanging messages between applications, locally and/or remotely, using named channels.</p>
 * \name App2App Messaging API
 *
 * The Webinos App2App Messaging specification defines interfaces
 * to create, send and receive messages between applications in the Webinos
 * system. It provides generic messaging primitives which can be applied
 * in different application scenarios. The messaging is <em>indirect</em>, 
 * meaning that applications do not directly address each other but use a named
 * channel to route the messages to connected applications. An unique namespace
 * (within a personal zone) is used as a key to find and connect to channels.
 *
 * This API can be used by third-party application
 * developers to implement custom message-based protocols by taking advantage of
 * the features offered by the Webinos message handling system and overlay
 * networking model.
 *
 * \def-api-feature http://webinos.org/api/app2app
 * \author Fabian Walraven &lt;fabian.walraven@tno.nl&gt;
 * \version 0.3.0
 */

/**
 * \brief The App2AppMessaging interface describes the part of the
 *        App2App Messaging API accessible through the
 *        webinos object.
 */
partial interface Webinos {
  /**
   * \brief webinos.app2app object.
   */
  readonly attribute App2AppMessaging app2app;
};

/**
 * \brief Access to the App2App Messaging functions.
 *
 * An application
 * can create a channel with a unique namespace. Other applications are
 * able to search for channels and request to connect to a channel.
 * An application can create and/or connect to multiple channels, and for each
 * channel the application is represented by a client instance which is valid
 * only in the scope of its channel (i.e. it can not be used as a cross-channel
 * application address).
 *
 * A client interacts with a channel proxy (which is returned as a result of
 * channel search) which exposes the channel API to a client. Before a client
 * can use a channel it first has to connect to it using the proxy.
 */
interface App2AppMessaging {

  /**
   * \brief Create a new channel. The channel creator decides which clients are allowed to connect to the channel. If the
   * connectCB is defined it is invoked for each client trying to connect to the channel. If a client is allowed the 
   * connectCB should return true, if not it should return false. If no connectCB is provided all clients are allowed to 
   * connect.
   *
   * \param configuration Channel configuration.
   * \param requestCB Callback invoked to allow or deny clients access to a channel.
   * \param messageCB Callback invoked to receive messages.
   * \param successCB Callback invoked when channel creation was successful.
   * \param errorCB Callback invoked when channel creation failed.
   * \code
   // create channel and ask user to accept connections
   var channel = webinos.app2app.createChannel({ namespace: "urn:webinos-org:example", properties: { mode: "send-receive",
                                                canDetach: true, reclaimIfExists: true }, appInfo: {} },
                                               function(request) { return confirm("Accept connect request from " + request.requestInfo) },
                                               function(message) { alert("Received message: " + message.contents) },
                                               function(channel) { alert("Channel creation was successful for namespace " + channel.namespace) },
                                               function(error) { alert("Could not create channel: " + error.message) });
   \endcode
   */
  void createChannel(
    App2AppChannelConfiguration configuration,
    App2AppChannelRequestCB requestCB,
    App2AppMessageCB messageCB,
    App2AppChannelCreateSuccessCB successCB,
    optional App2AppErrorCB errorCB);

  /**
   * \brief Search for channels.
   *
   * The key used for finding channels is the channel namespace. It is possible
   * to use a trailing wildcard for the namespace-specific string of the URN (RFC2141) to
   * match all channels with the provided namespace identifier prefix. This is
   * useful for example when multiple application instances of the same application run in
   * the personal zone, share the same namespace identifier and use a generated
   * namespace-specific string to avoid clashes.
   *
   * \param namespace The namespace (URN) of the channels to search for. A wildcard
   * is allowed for the namespace-specific string ('*').
   * \param zoneIds The identifiers of the personal zones to search for
   * channels in addition the local personal zone.
   * \param searchCB The callback called when a channel is found. Can be called 
   * multiple times if multiple channels are found.
   * \param successCB Callback invoked when the search is accepted for processing.
   * \param errorCB Callback invoked when search query could not be processed.
   * \return PendingOperation interface to cancel the asynchronous call.
   *
   * \code
   webinos.app2app.searchForChannels("urn:webinos:org:*", [],
                                     function(channel) { alert("Found a channel with namespace " + channel.namespace) });
   \endcode
   */
  PendingOperation searchForChannels(
    DOMString namespace, 
    DOMString[] zoneIds,
    App2AppChannelSearchCB searchCB,
    optional App2AppSuccessCB successCB,
    optional App2AppErrorCB errorCB);

};

/**
 * \brief The App2AppChannelProxy interface.
 *
 * A channel is the primary entity used for App2App Messaging, and is
 * represented by a proxy.
 * The namespace of a channel is specified as an URN and must be unique within
 * a personal zone. If an application attempts to create a channel with an 
 * already existing namespace (i.e. there is already an active channel with
 * the same namespace within the personal zone) the errorCB is invoked.
 *
 * An application can create multiple channels, if needed. Each channel
 * requires its own unique namespace.
 */
interface App2AppChannelProxy {

  /**
   * \brief The creator of the channel (i.e. a client reference).
   */
  readonly attribute object _creator;

  /**
   * \brief The namespace of the channel.
   */
  readonly attribute DOMString namespace;

  /**
   * \brief The properties of the channel.
   */
  readonly attribute App2AppChannelProperties properties;

  /**
   * \brief Application-specific information attached to the channel.
   */
  readonly attribute object appInfo;

  /**
   * \brief Connect to the channel. The connect request is forwarded to the channel creator, which decides if a client
   * is allowed to connect. The client can provide application-specific info with the request through the
   * requestInfo parameter.
   *
   * \param requestInfo Application-specific information to include in the request.
   * \param messageCB Callback invoked when a message is received on the channel (only after successful connect).
   * \param successCB Callback invoked if the client is successfully connected to the channel (i.e. if authorized).
   * \param errorCB Callback invoked if the client could not be connected to the channel.
   *
   * \code
   var channel; // previously found channel (proxy)
   channel.connect({ source: "me" },
                   function(message) { alert("Received message: " + message.contents) },
                   function(success) { alert("Successfully connected to channel.") },
                   function(error) { alert("Oops, something went wrong: " + error.message ) });
   \endcode
   */
  void connect(
    object requestInfo,
    App2AppMessageCB messageCB,
    optional App2AppSuccessCB successCB,
    optional App2AppErrorCB errorCB);

  /**
   * \brief Send a message to all connected clients on the channel.
   *
   * \param message The message to send.
   * \param successCB Callback invoked when the message is accepted for processing.
   * \param errorCB Callback invoked if the message could not be processed.
   *
   * \code
   var channel; // previously obtained and successfully connected channel (proxy)
   channel.send({ example: "message" },
                function(success) { alert("Successfully sent message.") },
                function(error) { alert("Oops, something went wrong: " + error.message ) });
   \endcode
   */
  void send(
    object message,
    optional App2AppSuccessCB successCB,
    optional App2AppErrorCB errorCB);

  /**
   * \brief Send to a specific client only. The client object of the channel creator is a property of the channel proxy. The
   * App2App Messaging API does not include a discovery mechanism for clients. A channel creator obtains the client
   * objects for each client through its connectRequestCallback (if defined), and if needed the channel creator can implement
   * an application-specific lookup service to other clients. A client object only has meaning within the scope of its
   * channel, not across channels. Note that the client object of a message sender can also be found in the "from"
   * property of the received message.
   *
   * \param client The client to send the message to.
   * \param message The message to send.
   * \param successCB Callback invoked when the message is accepted for processing.
   * \param errorCB Callback invoked if the message could not be processed.
   *
   * \code
   var channel; // previously obtained and successfully connected channel (proxy)
   var client = channel.creator;
   channel.send(client,
                { example: "message" },
                function(success) { alert("Successfully sent message.") },
                function(error) { alert("Oops, something went wrong: " + error.message ) });
   \endcode
   */
  void sendTo(
    object client,
    object message,
    optional App2AppSuccessCB successCB,
    optional App2AppErrorCB errorCB);

  /**
   * \brief Disconnect from the channel. After disconnecting the client does no longer receive messages from the channel.
   * If the channel creator disconnects, the behaviour depends on the channel configuration; if the canDetach option is undefined
   * or false the channel is closed and will be no longer available when the channel creator disconnects, otherwise the channel is
   * kept open (and the channel 
   * creator can later reconnect by setting the reclaimIfExists option on channel creation).
   * The service does not inform connected clients of the disconnect or closing. If needed the client can send an
   * application-specific message to inform other clients before disconnecting.
   *
   * \param successCB Callback invoked when the message is accepted for processing.
   * \param errorCB Callback invoked if the message could not be processed.
   */
  void disconnect(
    optional App2AppSuccessCB successCB,
    optional App2AppErrorCB errorCB);
};

/**
 * \brief The channel configuration.
 */
dictionary App2AppChannelConfiguration {

  /**
   * \brief The channel namespace
   */
  DOMString namespace;

  /**
   * \brief The channel properties
   */
  App2AppChannelProperties properties;

  /**
   * \brief Application-specific information to attach to the channel.
   */
  object appInfo;
};

/**
 * \brief The channel properties.
 */
dictionary App2AppChannelProperties {

  /**
   * \brief The mode of the channel.
   */
  ChannelMode mode;

  /**
   * \brief Can the channel creator disconnect without closing the channel.
   * Default is false.
   */
   boolean canDetach = false;

  /**
   * \brief Can the channel creator reconnect to an existing channel.
   * Default is false. Reconnect is only allowed within the same session.
   */
   boolean reclaimIfExists = false;
};

/**
 * \brief A channel request as it is delivered to the channel creator.
 */
dictionary App2AppChannelRequest {

  /**
   * \brief The sending client.
   */
  object from;

  /**
   * \brief The namespace of the channel on which the request is sent.
   */
  DOMString namespace;

  /**
   * \brief Application-specific information to include in the request.
   */
  object requestInfo;

};

/**
 * \brief A message as it is delivered to a client.
 */
dictionary App2AppMessage {

  /**
   * \brief The sending client.
   */
  object from;

  /**
   * \brief The receiving client.
   */
  object to;

  /**
   * \brief The namespace of the channel on which the message is sent.
   */
  DOMString namespace;

  /**
   * \brief The contents of the message.
   */
  object contents;

};

/**
 * \brief The available channel modes.
 *
 * <ul>
 *   <li>send-receive: connected clients can both send and receive on the
 *   channel.</li>
 *   <li>receive-only: connected clients can only receive on the channel
 *     (the channel creator can both send and receive).</li>
 * </ul>
 */
enum ChannelMode { "send-receive", "receive-only" };

/**
 * \brief The message callback for receiving messages on the channel.
 */
callback App2AppMessageCB = void (App2AppMessage message);

/**
 * \brief The request callback for authorizing channel connection attempts.
 */
callback App2AppChannelRequestCB = boolean (App2AppChannelRequest request);

/**
 * \brief Pending operation interface for cancelling asynchronous calls.
 */
[NoInterfaceObject] interface PendingOperation {

  /**
   * \brief Cancel method for cancelling asynchronous find channel operation.
   *
   * Cancel the pending channel search operation. When this method is called, the 
   * user agent must immediately bring the operation to stop and return.
   * Allocated resources should be released and any ongoing related network
   * operations should be terminated.
   */
  void cancel();
};

/**
 * \brief Success callback for when channel creation succeeded.
 */
callback App2AppChannelCreateSuccessCB = void(App2AppChannelProxy channel);

/**
 * \brief Success callback for when an operation successfully terminated.
 */
callback App2AppSuccessCB = void ();

/**
 * \brief Error callback for errors when interacting with a channel.
 */
callback App2AppErrorCB = void (DOMError error);

/**
 * \brief The channel search callback.
 */
callback App2AppChannelSearchCB = void (App2AppChannelProxy channel);

