/**<p> The Webinos Generic Sensor API provides Web Applications with an API to access data from sensors in the device or in another device.</p> 
 * \name The Generic Sensor API 
 *
 * The API is agnostic to underlying low level methods for sensor discovery and communication with sensors. However, the sensor API should be used
 * in combination with the general Webinos service discovery methods findServices() and bind(). The sensors services can be located in the user's personal zone or be shared on the current network.
 *
 * The API consists of two interfaces: \n
 * - A sensor interface that provides attributes for the sensors and a method to configure a selected sensor.\n
 * - A DOM level 3 event that provides sensor data.\n
 *
 * This list of sensor types supported in the API could easily be extended with additional sensor types.
 * 
 * Implementation notes:\n
 * - From the security point of view an extensible set of features identifying the various sensor types is reported; this allows a granular control on 
 * the type os sensor that can be accessed. Another feature (sensor.read) that does not allow access to configuration capabilities has been added.
 * This model may be modified due to further studies that will follow during implementation.\n
 * - Consider a visual warning on the device when the sensor is accessed, to avoid eavesdropping / privacy invasion by a remote or local application.\n
 * - Consider roaming costs for accessing remote sensors through the mobile network. An implementation might provide 'roaming' and 'non-roaming' profiles.\n
 * - Avoid unnecessary high rates of sensor events. Consider battery drain.\n 
 *
 * \def-api-feature http://webinos.org/api/sensors
 * Identifies all the sensor types. 
 *
 * \def-api-feature http://webinos.org/api/sensors.read
 * Enables access only to read methods of the api - access to configureSensor is forbidden
 *
 * \def-api-feature http://webinos.org/api/sensors.light
 * Identifies the light sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.noise
 * Identifies the noise sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.temperature
 * Identifies the temperature sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.pressure
 * Identifies the pressure sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.proximity
 * Identifies the proximity sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.humidity
 * Identifies the relative humidity sensor type. 
 *
 * \def-api-feature http://webinos.org/api/sensors.heartratemonitor
 * Identifies a heart rate monitor sensor type. 
 *
 * \author Claes Nilsson &lt;claes1.nilsson@sonymobile.com&gt;
 * \author Updated to new WIDL by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \author Stefano Vercelli &lt;stefano.vercelli@telecomitalia.it&gt;
 * \version 1.99 
 */


  /**
   * 
   * \code

        // Handle that can be used to cancel the ongoing asynchronous discovery process.
        var findHandle = 0;

        // Handle from service.bind.
        var sensorHandle = 0;

        // Array of found temperature sensors object.
        var availableTempSensors = {};
                 
        // Callback method that display a list of found sensors in a selection list
        // The selection list is dynamically extended every time a new sensor is discovered.
        function sensorFoundCB(sensor) {

                var selectlist = document.getElementById('sensorlist');
                var option = document.createElement('option');
                option.value = sensor.id;
                option.appendChild(document.createTextNode(sensor.displayName));
                availableTempSensors [sensor.id] = sensor;
                selectlist.appendChild(option);

        }
                      
 
       // Callback when bind has been successfully executed on the service object. The Sensor is authorized and ready to use
        function bindCB(mySensor) {

                alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id + ' selected');
               

                // Configure the sensor.
                mySensor.configureSensor ( {timeout: 120, rate: 5000, eventFireMode: "valuechange"}, 
                                           successHandler () {alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id +
                                                                    ' is configured') },
                                           errorHandler (error) {alert('Sensor ' + mySensor.displayName + ' with ID: ' + mySensor.id +
                                                                       ' configuration failed' + ' with error: ' + error.name)} );

               
                // Start listening to sensor events and log values. 
                mySensor.addEventListener('sensor', function (event) {
                          console.log(event.sensorValues[0]);

                          var temp = document.getElementById('temp');
                          temp.innerHTML = "Current temperature is: " + event.sensorValues[0];


                }, true); 

        }


       // Callback method that is invoked when user selects an option in the sensor selection list 
        function sensorSelected(sensor) {

                // Stops the findServices operation
                findHandle.cancel();

                // Binds to the sensor API to initiate an authorized objects used to
                // invoke services.  
                sensorHandle = sensor.bind({onBind:bindCB});                               
                
        }
        
        // Get list of temperature sensors registered in the device through the Service Discovery findServices() method
        findHandle  = window.webinos.discovery.findServices({api:'http://webinos.org/api/sensors.temperature'}, {onFound:sensorFoundCB});
 
       // Handle user selection of sensor
        var sensorlist = document.getElementById('sensorlist');
        sensorlist.addEventListener("change", function (e) {
                                var sensor = availableTempSensors[e.target.value];
                                if (sensor) {
                                    sensorSelected(sensor);
                                }
        }, false);


   * \endcode
   */  


   /**
    * \brief This interface defines sensor properties. It is a sensor specific extension to the interface Service in the ServiceDiscovery module.
    * The added attributes correspond to Android sensor API attributes.
    */ 
 
    interface Sensor : Service {
 
       /**
        * \brief Max range of sensor in the sensors unit.
        */
        readonly attribute float?          maximumRange;

       /**
        * \brief Min delay of sensor allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
        */
        readonly attribute unsigned long?   minDelay;

       /**
        * \brief Power consumption of sensor in mA used by this sensor while in use. 
        */
        readonly attribute float?         power;

       /**
        * \brief Resolution of the sensor in the sensors unit.
        */
        readonly attribute float?         resolution;

       /**
        * \brief Vendor string of this sensor.
        */
        readonly attribute DOMString?      vendor;  

       /**
        * \brief Version of the sensors module.
        */ 
        readonly attribute unsigned long?  version; 

       /**
        * \brief Configures a sensor.
        *
        * \param options Sensor configuration options. 
        * \param successCB Callback issued when sensor configuration succeeded.
        * \param errorCB Callback issued if sensor configuration fails.  
        * \return A pending operation object making it possible to cancel the configureSensor operation     
        */
        PendingSensorConfigOp configureSensor (ConfigureSensorOptions options, VoidFunction successCB, optional SensorErrorCB errorCB);
     };


   /**
    * \brief The SensorErrorCB method is called if an error occurs during the configureSensor() process.  
    *
    * \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> object detailing what 
    * went wrong in an unsuccessful configureSensor() asynchronous operation. The following error names cold be issued:\n
    * - "SyntaxError": Input parameters did not match the expected pattern.\n
    * - "NotSupportedError": Sensor configuration not supported.\n
    * - "InvalidModificationError": Sensor can not be configured in this way.\n
    * - "AbortError": Operation was aborted by the user.\n
    * - "TimeoutError": The operation timed out.
    */
    callback SensorErrorCB = void (DOMError error);

   /**
    * \brief Sensor event fire mode.\n
    * - fixedinterval = Events fired with a fixed time interval.\n
    * - valuechange = Events fired when value changes. This is the default value.
    */
    enum EventFireMode { "fixedinterval", "valuechange"};

  /**
    * \brief ConfigureSensorOptions interface definition
    */
    dictionary ConfigureSensorOptions {


      /**
       * \brief A timeout value for when configureSensor() is canceled in seconds between 0-65535. Default value is 120 seconds. 0 means infinite. 
       */
       unsigned short timeout;

      /**
       * \brief The requested rate of the sensor data.
	   * It is the time interval before a new event is generated. The value is expressed in ms. If the interval is too small for the sensor
	   * (that is it is unable to generate data at the selected rate) it shall use the maximum rate it can support.
       */
       unsigned long? rate;
       
     /**
       * \brief The requested sensor event fire mode.
       */
       EventFireMode? eventFireMode;

     /**
       * \brief The position of the sensor.
	   * This value may be ignored by the sensor if it retrieves position in a different way (for example has a gps module onboard)
       */
       GeoPosition? position;

     /**
       * \brief Generic configurations string.
	   * This string is in JSON format and can be used for additional sensors that need extra configuration parameters.
	   * The format of the string must be specified by the sensor developer.
       */
       DOMString? config;
	};

  /**
    * \brief GeoPosition interface definition
    */
    dictionary GeoPosition {

      /**
       * \brief Latitude. 
       */
       unsigned long latitude;

      /**
       * \brief Longitude.
       */
       unsigned long longitude;
     };

    /**
     * \brief The PendingSensorConfigOp interface
     *
     * The PendingSensorConfigOp interface describes the object that is returned by the asynchronous configure sensor method. It makes it possible to abort
     * this operation to a stop if it hasn't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
     *
     */
     interface PendingSensorConfigOp {

    /**
     * \brief Method Cancel
     *
     *  Cancel the pending configure sensor asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return.
     *  Allocated resources should be released and any ongoing related network operations should be terminated. An error callback is issued with the DOMError
     *  name "AbortError". If the configuration is no longer under control of the calling process, the cancel function will be ignored and all neccessary 'housekeeping functions' 
     *  required after starting the configuration process will be performed as if the cancel had never been issued.
     */
        void cancel ();
     };


  /**
   * \brief Sensor event accuracy.\n
   * high = The sensor is reporting data with maximum accuracy\n
   * medium = The sensor is reporting data with an average level of accuracy, calibrating with the environment may improve the reading.\n
   * low = The sensor is reporting with low accuracy, calibrating with the environment is needed.\n
   * unreliable = The sensor data cannot be trusted, calibrating is needed or the environment does not allow reading.\n
   * unavailable = The sensor is not available and no sensor data can be provided. This accuracy attribute will for example take this value when contact is lost with a sensor using Bluetooth communication.
   */
   enum Accuracy { "high", "medium", "low", "unreliable", "unavailable"};


  /**
   * \brief This interface defines the "genericsensor" event type.
   *
   *  Registration for generic sensor events is achieved by calling addEventListener instantiated on the selected sensor object with event type set to "sensor" (see code example in the beginning of this specification).\n
   *  To stop listening to a sensor removeEventListener is called.
   * 
   *
   * 
   */

   interface SensorEvent : Event {

  /**
   *  \brief The type of sensor. This is a URI defining the sensor type according to the defined sensor "feature" URI strings. See section "Features". \n
   *\n
   * For the defined sensor types the sensorValues array contains the following data:\n
   *\n
   * http://webinos.org/api/sensors.light:\n
   * sensorValue[0] = the measured ambient light level around the device in SI lux units.\n
   *\n
   * http://webinos.org/api/sensors.noise:\n
   * sensorValue[0] = the measured ambient noise around the device, DB(SPL).\n
   *\n
   * http://webinos.org/api/sensors.temperature:\n
   * sensorValue[0] = the measured ambient temperature around the device, degrees Celsius.\n
   *\n
   * http://webinos.org/api/sensors.pressure:\n
   * sensorValue[0] = the measured atmospheric pressure around the device in hPa (millibar)\n
   *\n
   * http://webinos.org/api/sensors.proximity:\n
   * sensorValue[0] =  proximity sensor distance measured in centimeters. Some sensor can only state "near" (0) and "far" (1)\n
   *\n
   * http://webinos.org/api/sensors.humidity:\n
   * sensorValue[0] =  the measured relative humidity around the device in percent. \n
   *\n
   * http://webinos.org/api/sensors.heartratemonitor:\n
   * sensorValue[0] =  the measured heart rate as beats per minute (bpm). \n
   *   
   */
    readonly attribute DOMString sensorType;

  /**
   * \brief The unique identity of the of the specific sensor
   */
    readonly attribute DOMString sensorId;


  /**
   * \brief The accuracy of the sensor
   */
    readonly attribute Accuracy accuracy;

 
  /**
   * \brief The rate of the sensor data.
   * This value will be 0 if the rate is undefined or eventFireMode is set to valuechange.
   */
    readonly attribute unsigned long rate;

  /**
   *  \brief The event fire mode the sensor.
   *
   */
    readonly attribute EventFireMode eventFireMode;

  /**
   * \brief Array of sensor values
   */
    readonly attribute float[] sensorValues;

    /**
     * \brief Position of the sensor.
     */ 
     readonly attribute GeoPosition?  position;


  /**
   * \brief Method to set initial values of sensor event.  
   *
   * The initSensorEvent() method must initialize the event in a manner analogous to the initEvent() method in http://www.w3.org/TR/2010/WD-DOM-Level-3-Events-20100907/.
   * The method can for example be used with document.createEvent() and EventTarget.dispatchEvent() to simulate a specific event.
   * The sensorType, sensorId, accuracy, rate, eventFireMode and sensorvalues arguments must initialize the attributes with the same names.
   *   
   * \param type Event type i.e. 'sensor'
   * \param bubbles True if event bubbles
   * \param cancelable True if event cancelable
   * \param sensorType Sensor type as a URI
   * \param sensorId The unique identity of the specific sensor
   * \param accuracy Accuracy of sensor data
   * \param rate Rate of sensor data event
   * \param eventFireMode Mode of firing events
   * \param sensorValues Array of sensor values
   * \param position Position of the sensor
   */
    void initSensorEvent(DOMString type,
                         boolean bubbles,
                         boolean cancelable,
                         DOMString sensorType,
                         DOMString sensorId,
                         Accuracy accuracy,
                         unsigned long rate,
                         EventFireMode eventFireMode, 
                         float[] sensorValues,
                         GeoPosition position);
    };


