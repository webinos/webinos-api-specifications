/**<p> The webinos Generic Actuator API provides applications with an API to control actuators.</p> 
 * \name The Generic Actuator API 
 * 
 *
 *
 * The webinos Generic Actuator API provides applications with an API to control actuators in the device, 
 * connected to the device or in another device.
 *
 * The API is agnostic to underlying low level methods for actuator discovery and communication with 
 * actuators. However, the Actuator API should be used in combination with the general webinos service 
 * discovery methods findServices() and bind(). The actuator services can be located in the user's 
 * personal zone or be shared on the current network.
 *
 * Currently several different actuator types are defined but the API could easily be extended with 
 * additional actuator types.
 * 
 * This is an experimental API and security and privacy issues are not specifically addressed in the 
 * specification. If access to security or privacy
 * sensitive actuators are provided the user agent must either acquire access permission through a 
 * user interface or control access through a prearranged
 * trust relationship with users. 
 *
 *
 * \def-api-feature http://webinos.org/api/actuators
 * Identifies all the actuator types. 
 *
 * \def-api-feature http://webinos.org/api/actuators/switch
 * Identifies the switch actuator type. A switch actuator has only one input pin which represents the state of the switch.
 * range = {0,1} (OFF = 0, ON = 1).
 *
 * \def-api-feature http://webinos.org/api/actuators/linearmotor
 * Identifies the linear motor actuator type. A linear motor actuator has only one input pin which represents the speed and the direction of the movement.
 * Positive values for forward direction, negative values for backwards direction. the absolute value represents the speed of the movement in km/h.
 *
 * \def-api-feature http://webinos.org/api/actuators/rotationalmotor
 * Identifies the rotational motor actuator type. A rotational motor actuator has only one input pin which represents the speed and the direction of the rotation.
 * Positive values for clockwise rotational direction, negative values for counter clockwise rotational direction. the absolute value represents the rotational speed in Hz (Herz = cycles per second).
 *
 * \def-api-feature http://webinos.org/api/actuators/vibratingmotor
 * Identifies the vibrating motor actuator type. A vibrating motor actuator has only one input pin which represents the normalized intensity of the vibration.
 * only values in interval [0, 1] are valid. 0 means no vibration, 1 for maximal intensity.
 *
 * \def-api-feature http://webinos.org/api/actuators/servomotor
 * Identifies the servo motor actuator type. A servo motor actuator has only one input pin which represents the angular position of the output shaft in degree.
 * The min und max values define the lower and upper bound for valid values of the angle
 *
 * \def-api-feature http://webinos.org/api/actuators/swivelmotor
 * Identifies the swivel motor actuator type. A swivel motor actuator has three input pins which represent the coordinate (x-y-z) of the swivel arm.
 * The min und max values of each input pin define the lower and upper bound for valid values of each coordinate
 *
 * \def-api-feature http://webinos.org/api/actuators/thermostat
 * Identifies the thermostat actuator type. A thermostat has only one input pin which represents the desired temperature in &deg;C.
 * The min und max values define the lower and upper bound for valid temperature values
 *
 * \author Louay Bassbouss &lt;louay.bassbouss@fokus.fraunhofer.de&gt;
 * \author Update to new WIDL format by Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 2.1
 */


  /**
   * 
   * \code

        // Handle that can be used to cancel the ongoing asynchronous discovery process.
        var findHandle = 0;

        // Handle from service.bind.
        var actuatorHandle = 0;

        // Array of found switch actuators object.
        var availableSwitchActuators = {};
                 
        // Callback method that displays a list of found actuators in a selection list
        // The selection list is dynamically extended every time a new actuator is discovered.
        function actuatorFoundCB(actuator) {

                var selectlist = document.getElementById('actuatorlist');
                var option = document.createElement('option');
                option.value = actuator.id;
                option.appendChild(document.createTextNode(actuator.displayName));
                availableSwitchActuators [actuator.id] = actuator;
                selectlist.appendChild(option);

        }
                      
 
       // Callback when bind has been successfully executed on the service object. The Actuator is authorized and ready to use
        function bindCB(myActuator) {
                alert('Actuator ' + myActuator.displayName + ' with ID: ' + myActuator.id + ' selected');
				var ON = 1.0;
				var OFF = 0.0;
				var successCB = function(evt){
					alert('Switch Actuator ' + myActuator.displayName + ' is now '+ (evt.actualValue[0] == ON? 'ON': 'OFF'));
					if(evt.actualValue[0] == ON){
						// turn OFF after 5 Seconds 
						setTimeout(function(){
							myActuator.setValue([OFF],successCB,errorCB);
						},5000);
					}	
				};
				var errorCB = function(err){
					alert('Error on change the state of the Switch Actuator ' + myActuator.displayName);
				};
				// Turn Switch ON
				myActuator.setValue([ON],successCB,errorCB);
        }


       // Callback method that is invoked when user selects an option in the actuator selection list 
        function actuatorSelected(actuator) {

                // Stops the findServices operation
                findHandle.cancel();

                // Binds to the actuator API to initiate an authorized objects used to
                // invoke services.  
                actuatorHandle = actuator.bind({onBind:bindCB});                               
                
        }
        
        // Get list of switch actuators registered in the device through the Service Discovery findServices() method
        findHandle  = window.webinos.discovery.findServices({api:'http://webinos.org/api/actuators.switch'}, {onFound:actuatorFoundCB});
 
       // Handle user selection of actuator
        var actuatorlist = document.getElementById('actuatorlist');
        actuatorlist.addEventListener("change", function (e) {
                                var actuator = availableSwitchActuators[e.target.value];
                                if (actuator) {
                                    actuatorSelected(actuator);
                                }
        }, false);


   * \endcode
   */

        /**
        * \brief This interface defines an abstract class representing the range of the actuator values. 
        * The actuator range can be an interval (e.g. temperature is in interval [0&deg;C,27&deg;C]) or a set of 
        * valid values (e.g. a switch accepts only the values {0,1} representing the ON and OFF state). 
        */ 
        interface ActuatorRange {
                //this interface is abstract and therefore it dosent consist any attribute.
        };

        /**
        * \brief This interface defines an interval as a sub class of the actuator range. 
        * all valid values of the associated actuator must be between the min and max value.
        * if the min/max value is undefined means that the lower/upper bound of actuator values 
        * is not limited
        */
        [Constructor(float minValue), Constructor(float minValue,float maxValue)]
        interface IntervalRange: ActuatorRange {
                /**
                * \brief Min range of actuator in the actuator unit.
                * undefined min value means that the lower bound is not limited
                */
                attribute float minValue;
                /**
                * \brief Max range of actuator in the actuator unit.
                * undefined max value means that the upper bound is not limited
                */
                attribute float maxValue;
        };

        /**
        * \brief This interface defines a set of valid values as a sub class of the actuator range.
        * a valid value of the actuator must be one of the values array.
        */
        [Constructor(float[] validValues)]
        interface ListRange: ActuatorRange {
                /**
                * \brief Valid values in the actuator unit
                */
                attribute float[] validValues;
        };

  
        /**
        * \brief This interface defines the actuator properties. 
        * It is an actuator specific extension to the interface Service in the ServiceDiscovery module.
        */ 
 
        [NoInterfaceObject] interface Actuator : Service {

                /**
                * \brief The range of each actuator value.
                * 
                * The size of the range array must be the same as the number of input pins of the actuator
                */
                readonly attribute ActuatorRange[] range;
 
                /**
                * \brief The unit of each actuator value.
                * 
                * The unit array and the range array must have the same size, 
                * which represents the number of input pins of the actuator
                */
                readonly attribute DOMString[] unit;

                /**
                * \brief Vendor string of this actuator.
                */
                readonly attribute DOMString? vendor;  

                /**
                * \brief Version of the actuators module.
                */ 
                readonly attribute unsigned long?  version;

                /**
                * \brief Set a new actuator value.
                *
                * \param value an array of new actuator values. The size of the value array is the same as the number of input pins of the actuator.
                * \param successCB the success callback called with an ActuatorEvent object as input in case the setValue call succeeded.
                * \param errorCB the error callback
                */
                PendingOperation setValue (float[] value, optional ActuatorSuccessCB successCB, optional ActuatorErrorCB errorCB);
        };

                /**
                * \brief onSuccess The onSuccess method is called after the setValue succeeded.  
                *
                * \param event The event object associated to the asynchronous operation setValue
                */
                callback ActuatorSuccessCB =  void (ActuatorEvent event); 


      /**
       * \brief The ActuatorErrorCB method is called if an error occurs during the setValue() process.  
       *
       * \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> object detailing what 
       * went wrong in an unsuccessful setValue() asynchronous operation. The following error names could be issued:\n
       * - "SyntaxError": Input parameters did not match the expected pattern or value is not in range.\n
       * - "AbortError": Operation was aborted by the user.\n
       * - "TimeoutError": The operation timed out.
       */
       callback ActuatorErrorCB = void (DOMError error);
                

        /**
        * \brief The PendingOperation interface
        *
        * The PendingOperation interface describes objects that are returned by asynchronous methods that are cancellable. It makes it possible to bring 
        * these operations to a stop if they haven't produced a result within a desired time or before a given event, thereby possibly reclaiming resources.
        */
        [NoInterfaceObject] interface PendingOperation {

          /**
          * \brief Method Cancel
         *
         *  Cancels the pending setValue() asynchronous operation. When this method is called, the user agent must immediately bring the operation to a stop and return.
         *  Allocated resources should be released and any ongoing related network operations should be terminated. An error callback is issued with the DOMError
         *  name "AbortError". If the set value operation is no longer under control of the calling process, the cancel function will be ignored and all neccessary 'housekeeping functions' 
         *  required after starting the set value process will be performed as if the cancel had never been issued.
         */
            void cancel ();
        };


        /**
        * \brief This interface defines the actuator data type.
        */

        interface ActuatorEvent {
                /**
                * \brief The type of the actuator. This is a URI defining the actuator type according to the defined actuator "feature" URI strings.\n
                * For the defined actuator types the actualValue array contains the following data:\n
                *\n
                * http://webinos.org/api/actuators.switch:\n
                * actualValue[0] = the actual state of the switch. OFF=0, ON=1\n
                * 
                */
                readonly attribute DOMString actuatorType;

                /**
                * \brief The unique identity of the of the specific actuator
                */
                readonly attribute DOMString? actuatorId;

                /**
                * \brief Array of actual values representing the current state of the actuator
                */
                readonly attribute float[] actualValue;

                /**
                * \brief Method to set initial values of actuator event.  
                *   
                * \param type Event type i.e. 'actuator'
                * \param actuatorType Actuator type as a feature URI
                * \param actuatorId The unique identity of the specific actuator
                * \param actualValue Array of actual value
                */
                void initActuatorEvent(DOMString type, DOMString actuatorType, DOMString actuatorId, float[] actualValue); 
        };
