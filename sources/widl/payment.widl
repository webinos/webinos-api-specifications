/**<p> Interface for Payment functions.</p>
 * \name Payment API
 *
 * This API provides functionality to provide in-app payment.
 *
 * It is not linked to a specific payment service provider and is designed to be 
 * sufficiently generic to be mapable to various payment services like GSMA OneAPI,
 * BlueVia, Android Payment API or PayPal. 
 *
 *
 * \def-api-feature http://webinos.org/api/payment
 * Identifies all payment interactions. 
 * 
 * \author Christian Fuhrhop &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \author Updated from version 1.0  &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \author Corrections relating to inheriting Discovery Service interface &lt;christian.fuhrhop@fokus.fraunhofer.de&gt;
 * \version 2.0
 */
 

    /**
   * \brief The Payment interface
   *
   * The Payment interface provides access to payment functionality.
   *
   * The API supports the payment from the device user to a merchant
   * or other user, utilizing a payment provider.
   *
   * The payment interface is a discoverable interface through the webinos Discovery API findServices()
   * method and thus inherits the Discovery API Service interface. 
   *
   * The code example below refunds the user for a returned CD and charges for
   * the deluxe edition of that CD, demonstarting charging and refunding payments.
   *
   * \code
   *       // creating item list
   *       var itemList = new Array();
   *       itemList[0] = {  productID: 'DCD2346233', 
   *                       description: 'Best of Ladytron 00-10 by Ladytron (Audio CD - 2011)', 
   *                       currency: 'EUR',
   *                       itemPrice: 14.99,
   *                       itemCount: 1
   *                     };
   *       itemList[1] = {  productID: 'DCD1358954167', 
   *                       description: 'Breakfast at Tiffanys DVD', 
   *                       currency: 'EUR',
   *                       itemPrice: 5.97,
   *                       itemCount: 1
   *                     };
   *       itemList[2] = {  description: 'Postage and Packaging', 
   *                       currency: 'EUR',
   *                       itemPrice: 5.0,
   *                       itemCount: 1
   *                     };
   *    
   *       var bill = {  description: 'Bill 123456', 
   *                       currency: 'EUR',
   *                       itemPrice: 25.96 
   *                     };
   *       // paymentService is the messaging service, discovered through the webinos Discovery API, 
   *       // that has been selected by the user    
   *        paymentService.pay(paymentSuccess, paymentFailure, paymentChallenge,
   *                             itemList, bill,  "mymail@provider.com", "ShopName12345" );
   *        
   *        // Define the checkoutSuccess success callback.
   *        function paymentSuccess() {
   *                alert("Payment handled successfully - payment was performed.");
   *        }        
   *
   *        // Define the paymentFailure failure callback.
   *        function paymentFailure(e) {   
   *                alert("Failure occured during payment.");
   *        }
   *
   *        // Define the paymentChallenge callback.
   *        function paymentChallenge(cType, cValue) {   
   *                 
   *         if(cType=="url"){
   *           // direct web page of payment provider
   *           window.open(cValue, "Confirm Payment", "width=300,height=200,scrollbars=yes");
   *         }
   *         else if(cType=="text"){
   *             userInput = prompt(cValue, "");
   *             answerChallenge(userInput);
   *         }
   *         else if(cType=="image"){
   *             // this would need a custom prompt, which would make this example
   *             // too large - just pretent it's here.
   *             userInput = graphicPrompt(cValue, "");
   *             answerChallenge(userInput);
   *         }
   *         else alert("Unknown challenge type "+cType+" issued by payment provider.");  *
   *        }
   *         
   *
   * \endcode
   *
   *
   */



 
[NoInterfaceObject] interface Payment : Service{ 
        /**
       * \brief Performs the payment using a payment provider.
       *
       * The bill will be charged to the shopper.
       *
       * Depending on the implementation of the actual payment service, this function
       * might cause the checkout screen of the payment service provider to be displayed.
       *
       * \param successCallback Callback issued when the checkout is performed and payment is made
       * \param errorCallback Callback issued if an error occurs during adding the amount   
       * \param challengeCallback Callback that will be used if the payment provider requires additional confirmation to finalize payment
       * \param itemList This is a list of shopping items that have been bought - this is primarily for providing detailed invoisces if the payment provider allows itemized bills. Due to the use of coupons or special combination offers, there is no requirement that the sums of the individual prices is the same as the charged amount for the bill. The item list has only informative purpose and can be left empty or null.
       * \param bill This defines the payment to be performed. Mandatory parts of the bill are the amount to be paid, the currency and an ID that allows the merchant to match the payment to the purchase. For the bill, itemCount is required to be 1 and itemsPrice and itemPrice need to be identical. A human readable description should be provided, but isn't mandatory.
       * \param customerID is identification of the person making the payment as known to the payment provider
       * \param sellerID is the identification of the shop the payment is made to
       * \return void
       */
        void pay(PaymentSuccessCB successCallback, PaymentErrorCB errorCallback, PaymentChallengeCB challengeCallback,
        ShoppingItem [] itemList, ShoppingItem bill,  DOMString customerID, DOMString sellerID);
  };
  
    /**
   * \brief The ShoppingItem captures the attributes of a single shopping product
   *
   * The shopping basket represents a current payment action and allows to 
   * add a number of items to the basket before proceeding to checkout.
   *
   **/
   dictionary ShoppingItem {
        /**
       * \brief An id that allows the shop to identify the purchased item
       *
       */
         DOMString productID;
        /**
       * \brief A human-readable text to appear on the bill, so the user can easily see what they bought.
       *
       */
         DOMString description;
        /**
       * \brief The 3-figure code as per ISO 4217.
       *
       */
         DOMString currency;
        /**
       * \brief The price per individual item in the currency given above, a negative number represents a refund.
       *
       */
         float itemPrice;
        /**
       * \brief The number of identical items purchased
       *
       */
         unsigned long itemCount;
       /**
       * \brief Price for all products in this shopping item.
       *
       * Typically this is itemPrice*itemCount, but special '3 for 2' rebates might apply.
       *
       */
         float itemsPrice;
    };  

     
                        
        /**
         * \brief Callback for errors during payment related functions
         * \param proofOfPurchase Payment provider specific token to verify purchase. 
         */
        callback PaymentSuccessCB = void (DOMstring proofOfPurchase);
        
        /**
         * \brief Callback for errors during payment related functions
         * \param error The Payment API related error object of an unsuccessful asynchronous operation. 
         */
        callback PaymentErrorCB = void (PaymentError error);
        

        /**
         * \brief Callback for additional confirmation / identification challenges by the payment provider
         *
         * In many payment scenarios, the payment provider will require additional information
         * and confirmation by the user to ensure that the payment is done with user consent
         * and that the user is not impersonated by an application. To facilitate this, the
         * payment provider can issue a challenge, which will be presented to the user and
         * needs to be responded to by the user. It is the task of the payment provider to 
         * ensure that challenges are changing and a capture/replay attack will not be successful.
         * 
         * Depening on the needs of the transaction, this can also be used to ensure that the
         * payment is confirmed by a person (for example by using captcha-style images) and also
         * to confirm to users that they are indeed connected to the proper payment provider (for
         * example by presenting an image, only known to the user and the payment provider overlaid
         * with information about the current payment process).
         * 
         * Challenges can take three forms:
         *   Text challenges - such as "Enter the PIN from the SMS we just sent you."
         *   Image challenges - captcha-style images or any image containing a textual question
         *   URL - many payment providers require a re-direct to their own web page for additional
         *         identification and confirmation. On receiving an URL, the client is required
         *         to open a frame with this URL so the user can comunicate and provide credentials
         *         directly to the payment provider.         
         *
         * \param challengeType Defines the challenge type issued by the payment provider.
         * \param challenge Defines the challenge to be presented to the user
         */
        callback PaymentChallengeCB = void (PaymentChallengeType challengeType, DOMString challenge);
        


        /**
        * \brief Types of payment challenges
        */
          enum PaymentChallengeType {"text", "image", "url"};
          
        /**
        * \brief Types of error messages specific to payment functionality
        */
         enum PaymentErrors { "payment_charge_failed", "payment_chargeable_exceeded", "payment_authentication_failed"};

        /**
         * \brief Payment specific errors.
         *
         * The PaymentError dictionary encapsulates all errors in the manipulation of payments objects in the Payment API. 
         */
        dictionary PaymentError {

        /**
       * \brief An error code assigned by an implementation when an error has occurred in Payment processing.
       *
       * No exceptions.
       */
        PaymentErrors code;
        /**
       * \brief A text describing an error occuring in the Payment in human readable form.
       *
       * No exceptions.
       */    
        DOMString message;
        /**
       * \brief A boolean value describing whether the error is likely to be of a temporary nature (such as a connection failure) which might not be present on a retry a couple of seconds later. As a guideline, for every condition that is not likely to be resolved within one minute, 'retryPossible' should be false.
       *
       * No exceptions.
       */    
        boolean retryPossible;
  };  



