/**<p>Interface for TV control and managment.</p>
* \name TV Control API
*
* The interface provides means to acquire a list of tv sources, channels and
* their streams.
* 
* The TV channel streams can be displayed in <a href="http://dev.w3.org/html5/spec/video.html">HTMLVideoElement object</a>.
* Alternatively the API provides
* means to control channel management of the native hardware TV, by allowing
* to set a channel or watch for channel changes that are invoked otherwise.
*
*
* \def-api-feature http://webinos.org/api/tv
* \author Fraunhofer FOKUS, Martin Lasak &lt;martin.lasak@fokus.fraunhofer.de&gt;, Alexander Fut&aacute;sz &lt;alexander.futasz@fokus.fraunhofer.de&gt;
* \author Dominique Hazael-Massieux
* \author Corrections relating to inheriting Discovery Service interface &lt;claes1.nilsson@sonymobile.com&gt;
*/

/**
* \brief  This is the top-level interface for the TV API that provides access to tuner and display managers.
* 
* The TVManager interface is a discoverable interface through the webinos Discovery API findServices() method and thus 
* inherits the Discovery API Service interface.
*/
interface TVManager : Service {
  readonly attribute TVDisplayManager display;
  readonly attribute TVTunerManager tuner;
}; 

/**
 * \brief Interface to manage what's currently displayed on TV screen.
 *
 * This interface is useful when an app doesn't want to show the broadcast
 * itself, but let the TV natively handle playback, i.e. not in a web context.
 * Useful to build an control interface that allows channel switching.
 * \code
  \<p>Currently shown on TV: \<span id='tv'>Undetermined\</span>\</p>
  \<script>
  var channel; // holding a previously obtained channel object.
  // tvService is the TV service, discovered through the webinos Discovery API, that has been selected by the user
  tvService.display.setChannel(channel, success);
  var ontv = document.getElementById('tv');
  function success(channel) {
    ontv.normalize();
    ontv.removeChild(ontv.childNodes[0]);
    ontv.appendChild(document.createTextNode(channel.name));
  }
  \</script>
 * \endcode
*/
interface TVDisplayManager : EventTarget {
  /**
   * \brief The channel currently displayed; null if no channel is tuned.
  */
   attribute Channel? currentChannel;
 
  /**
   * \brief Switches the channel natively on the TV (same as when a hardware remote control would be used).
   *
   * \param channel The TV channel to switch to.
   * \param successCallback The callback to notify the caller that the channel change succeeded.
   * \param errorCallback The callback called in case the channel could not be switched or an error occured.
   */
  void setChannel(Channel channel, TVDisplaySuccessCB successCallback, optional TVErrorCB errorCallback);

/**
 * \brief Event that fires when the channel is changed.
 *
 * Changing channels could also be invoked by other parties, e.g. a hardware
 * remote control. A channelchange event will be fired any time a channel
 * is being changed.
 * \code
  \<p>Currently shown on TV: \<span id='tv'>Undetermined\</span>\</p>
  \<script>
  // tvService is the TV service, discovered through the webinos Discovery API, that has been selected by the user
  tvService.display.addEventListener('channelchange', channelchanged);
  var ontv = document.getElementById('tv');
  function channelchanged(channel) {
    ontv.normalize();
    ontv.removeChild(ontv.childNodes[0]);
    ontv.appendChild(document.createTextNode(channel.name));
  }
  \</script>
 \endcode
 */
  [TreatNonCallableAsNull]
             attribute EventHandler onchannelchange;
};

/**
 * \brief Callback function when current channel changed successfully.
*/
callback TVDisplaySuccessCB = void (Channel channel);

/**
* \brief Get a list of all available TV tuners.
* \code
  \<label>Pick a TV Source: \<select id='source'>
  \<option>None\</option>
  \</select>\</label>
  \<label>Pick a  channel: \<select id='channel'>
  \<option>None\</option>
  \</select>\</label>
  \<video id='display' width='640' height='400' poster='nochannel.png'>\</video>
  \<script>
  // tvService is the TV service, discovered through the webinos Discovery API, that has been selected by the user
  tvService.tuner.getTVSources(successCB);
  var tvsourceselector = document.getElementById('source');
  var channelselector = document.getElementById('channel');
  var v = document.getElementById('display');
  var currentTVSource;
  var tvsources = [];
  function successCB(sources) {
    tvsources = sources;
    for (var i in sources) {
      var o = document.createElement('option');
      o.value = i;
      o.appendChild(document.createTextNode(sources[i].name);
      tvsourceselector.appendChild(o);
    }
  }
  tvsourceselector.addEventListener('change', function (e) {
    currentTVSource = tvsources[e.target.value];
    // start showing first channel
    if (currentTVSource.channelList.length) {
      v.src = currentTVSource.channelList[0].stream;
      for (var i in currentTVSource.channelList) {
          var channel = currentTVSource.channelList[i];
	  var o = document.createElement('option');
	  o.appendChild(document.createTextNode(channel.name);          
	  o.value = i;
	  channelselector.appendChild(o);
    }
  }, false);
  channelselector.addEventListener('change', function (e) {
     if (e.target.value) {
       v.src = currentTVSource.channelList[e.target.value].stream;
     }
  }, false);
  \</script>
* \endcode
*/
interface TVTunerManager {
  /**
   * \brief Get a list of all available TV sources.
   *
   * \param successCallback Callback that receives all available TV sources, e.g. tuners.
   * \param errorCallback Callback called in case something goes wrong.
   */
  void getTVSources(TVManagerSuccessCB successCallback, optional TVErrorCB errorCallback);
};

/**
* \brief Callback for found TV sources.
* \param sources An array of TVSource objects representing available tuners.
*/
callback TVManagerSuccessCB = void (TVSource[] sources);

/**
* \brief Error callback for errors when trying to get TV sources or setting a channel and something goes wrong.
* \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#interface-domerror">DOMError</a> object is detailing what went wrong; e.g. "NotFoundError" as name attribute of the error object if channel is invalid. An error with "NetworkError" or "TimeoutError" as value 
* for the name attribute may occur if the service gets (temporarily) unreachable.
*/
callback TVErrorCB = void (DOMError error);


/**
* \brief TV source: a list of channels with a name.
*/
dictionary TVSource {
  /**
   * \brief The name of the source.
   *
   * The name should describe the kind of tuner this source represents, e.g. DVB-T, DVB-C.
   */
  DOMString name;
  
  /**
   * \brief List of channels for this source.
   */
  Channel[] channelList;
};

/**
 * \brief Type of channels
*/
enum ChannelType { "tv", "radio"};

/**
 * \brief The Channel Interface
 *
 * Channel objects provide access to the video stream.
 */
dictionary Channel {
  /**
   * \brief The type of channel.
   *
   * Type of channel
   */
  ChannelType channelType;
  
 /**
   * \brief The name of the channel.
   *
   * The name of the channel will typically be the call sign of the station. To be used in cases
   * if there is less space than needed for displaying the long name, e.g in horizontal lists 
   * or other compact channel list display modes. Thus, a name may be an acronym or abbreviation 
   * of the long name (longName attribute).
   */
   DOMString name;
  
  /**
   * \brief The long name of the channel.
   *
   * The long name or fully spelt name of the channel if transmitted. Can be undefined if not available.
   */
   DOMString? longName;
  
  /**
   * \brief The video stream.
   *
   * The stream attribute represents a valid source for a HTMLVideoElement.
   * The MediaStream object itself is defined by the W3C at
   * <a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediastream">Media Capture and Streams API</a> 
   */
   MediaStream stream;
  
};
