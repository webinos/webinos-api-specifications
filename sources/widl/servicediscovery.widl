/**<p>The Webinos Discovery API provides web applications with an API to discover services without any previous knowledge of the service.</p>
 * \name Discovery API 
 *

 * The Discovery API is not limited to discovery of local services but also enables discovery of remote services.
 *  
 * The API enables discovery of services that is exposed either:\n\n
 * 1. in the device\n
 * 2. by entities directly connected to the device,\n 
 * 3. by entities available on the same local IP network\n
 * 4. by trusted services registered in a personal zone. \n\n
 * Once a service is found the API will provide a service object that is used to bind to a service and monitor the availability of the service. The binding to a service will
 * make sure that the user is authorized to use the service, create an implementation of the API and establish a communication path to the remote peer 
 * providing the service. The service object hides the complexity of communicating over different bearers, do cross network addressing, traversing NAT/Firewalls and connection management. 
 * 
 * Prerequisites for the Discovery API is that the web application using the API is installed, trusted and that the user of
 * of the device is authenticated and authorized to use the API.
 *
 * \def-api-feature http://webinos.org/api/discovery
 * \author Anders Isberg &lt;anders.isberg@sonymobile.com&gt;
 * \author Andr&eacute; Paul &lt;andre.paul@fokus.fraunhofer.de&gt;
 * \author Claes Nilsson &lt;claes.nilsson@sonymobile.com&gt;
 * \version 1.1
 */
	/**
	 * \brief The DiscoveryInterface interface provides functionality for discovery of services. 
	 * The API supports the possibility to discover services based on a given service type either in 
	 * a personal zone of trusted services or via other legacy discovery methods such as Bluetooth SD, DNS SD, mDNS or UPnP. 
	 * When searching for a service type the operation can be restricted by providing certain constraints and/or context information
	 * via a filter interface. 
	 *
	 * The code example below shows how an application initiates a search query
	 * to find a geolocation service. Whenever a service is found, a new HTML selection item
	 * is added to an HTML option list. Once the user selects a service, the usage of the service is authorized and an implementation of
	 * the API is instantiated by binding to the service.  
	 * \code
	var findHandle = 0;
	var serviceHandle = 0;
	var geoServices = {};
	var serviceId;
	
	// Callback that displays a list of found services in a HTML selection list
	// The selection list is dynamically extended every time a new service is discovered.	
	function serviceFoundCB(service) {	
		var selectlist = document.getElementById('servicelist');
		var option = document.createElement('option');
	
		option.value = service.id;
		option.id = service.id;
		option.appendChild(document.createTextNode(service.displayName));
		geoServices[service.id] = service;
		selectlist.appendChild(option);
	}
	
	// Callback that removes a service from the selection list of found services,
	// when the service is not available any longer. 
	function serviceLostCB(service) {	
		var option = document.getElementById(service.id);
	
		geoServices[service.id] = NULL;
		option.parentNode.removeChild(option);
	}
	
	// Success callback when bindService has been successfully executed on the service object. 
	function bindCB(myLocationService) {
		alert('Service ' + myLocationService.displayName + ' ready to use');
		myLocationService.getCurrentPosition(showMap);
	}
	
	// Event listner that is called when the 'change' event is dispatched on the HTML selection list.  
	function serviceSelected(service) {	
		// Stops the findServices operation
		findHandle.cancel();
	
		// Binds to the service to initiate an authorized object used to
		// invoke services.  
		service.bindService({onBind:bindCB});
	}
	
	if (serviceId) {
		// If serviceId is known, bind to the service directly. Assumes
		// that serviceId is stored persistently or received via an out
		// of band channel. 
		
		window.webinos.discovery.findServices(
			{api:'http://www.w3.org/ns/api-perms/geolocation'}, 
			{onFound:serviceFoundCB, onLost:serviceLostCB},
			null,
			{serviceID : serviceId});
		
		serviceHandle = window.webinos.discovery.findServices(
			{api:'http://www.w3.org/ns/api-perms/geolocation'}, 
			{onFound:serviceFoundCB, onLost:serviceLostCB},
			null,
			{serviceID: serviceId});
	} 
	else {
		// Initiate a search query for a service of the type geolocation
		findHandle = window.webinos.discovery.findServices(
			{api:'http://webinos.org/api/w3c/geolocation'}, 
			{onFound:serviceFoundCB, onLost:serviceLostCB});
	
		var selectlist = document.getElementById('servicelist');
		selectlist.addEventListener("change", function (e) {
			var service = geoServices[e.target.value];
			if (service) {
				serviceSelected(service);
			}
		}, false);	
	}
	 * \endcode
	 *
	 */
	[NoInterfaceObject] interface DiscoveryInterface  {
		/**
		 * \brief 	The findServices method initiates an asynchronous search query for services matching the requested serviceType and filter parameter. The method continues to search for services until 
		 * the findServices method is canceled by the application or when the maximum search timer expires. The zones in which services are to be searched are expected to be managable by the webinos runtime.
		 *
		 * \param serviceType An input argument that defines which type of API that is requested. The serviceType is an URI that uniquely identifies the API.   
		 * \param findCallBack Callback interface used to report the outcome of the search process. 
		 * \param options Defines search options. 
		 * \param filter Defines a filter that be used to limit the service operation to certain constraints and context information. NOTE: It is proposed that Filter should be replaced by REST-like query parameters that extends the Feature URI used as serviceType in findServices().
		 */
		 PendingOperation findServices(	
		 	ServiceType serviceType, 
		 	FindCallBack findCallBack, 
		 	optional Options options, 
		 	optional Filter filter);
		 
		/**
		 * \brief For the case that the application itself exposes functionality via JavaScript service interfaces the getServiceId method generates a service identity that can be shared with other peers to establish a binding without invoking a findServices operation. If no matching API is found the method will return Null. 
		 * \param serviceType URI identifying which type of API that shall be exposed. The URI shall be must be declared in the manifest in the api-name attribute of the webinos:shared-api element.
		 */
		 DOMString getServiceId(DOMString serviceType);
		 
	};		
	/**
	 * \brief The Service Type dictionary is used to define which type of service that is requested. 
	 */
	dictionary ServiceType {
		/**
	 	 * \brief 	URI used to identify which type of API that is requested. The URI could either be:\n\n 
	 	 *			1. webinos Feature URI that is defined for each API by Webinos, for example http://webinos.org/api/sensors/temperature,\n
	 	 *      2. webinos Feature URI for referred unchanged API specifications, for example http://webinos.org/api/w3c/geolocation,\n
	 	 *			3. an unique URI identifying an API exposed by a web application. The URI shall be the same URI as exposed by the web application manifest in the api-name attribute of the webinos:shared-api element.\n  
     * \n
     * The search could be refined by extending the Feature URIs with "REST style" discovery parameters. A set of query parameters can be used for all 
     * APIs but API specific parameters can also be specified as defined by the "Features" section of each webinos API specification. If no parameters
     * are given the search is not restricted.\n
     * \n
     * The common discovery parameters are:\n
     * \n
     * - Parameter name: filter\n
     * - Values: localpzp, mypz\n
     * - Description: Makes it possible to restrict the search to only services supported by the same PZP, i.e. in the same device, or to services only
     *   in the user's personal zone. \n
     * \n
     * \n
     * - Parameter name: filterzone\n
     * - Values: Name of personal zone.\n
     * - Description: Name of personal zone that will be used to search for services in addition to the personal zone of the user logged into to the 
     *   device\n
     * \n     
     * \n
     * - Parameter name: serviceid\n
     * - Values: Unique Id for the searched service.\n
     * - Description: If set service discovery will only return the service with the given identifier. This can be used to establish a service 
     *   binding directly if the service identity is already known, for example if the service identity was stored persistently for later reuse or it 
     *   was received via out of band.\n
     * \n     
     * \n     
	   * \code    
	     // Examples of webinos service discovery using parameters
	     
	     // Initiate a search query for TV service within the user's personal zone only.
		   findHandle = window.webinos.discovery.findServices(
			              {api:'http://webinos.org/api/tv?filter=mypz'}, 
			              {onFound:serviceFoundCB, onLost:serviceLostCB});	   
			              
	     // Initiate a search query for TV service within the user's and Alex's personal zones.
		   findHandle = window.webinos.discovery.findServices(
			              {api:'http://webinos.org/api/tv?filterzone=alex@pzh'}, 
			              {onFound:serviceFoundCB, onLost:serviceLostCB});			
			              
	     // Initiate a search query for a specific TV service whose service ID is already known.
		   findHandle = window.webinos.discovery.findServices(
			              {api:'http://webinos.org/api/tv?serviceid=some_serv_id'}, 
			              {onFound:serviceFoundCB, onLost:serviceLostCB});					              	                
	     
	     // Initiate a search query for a proximity sensor capable of providing proximity in centimeters
		   findHandle = window.webinos.discovery.findServices(
			              {api:'http://webinos.org/api/sensors/proximity/read?accuracy=cm'}, 
			              {onFound:serviceFoundCB, onLost:serviceLostCB});
			              
	     // Initiate a search query for a proximity sensor just capable of stating near or far
		   findHandle = window.webinos.discovery.findServices(
			              {api:'http://webinos.org/api/sensors/proximity/read?accuracy=nearfar'}, 
			              {onFound:serviceFoundCB, onLost:serviceLostCB});			              
	     
	   * \endcode
  	 *	    
     *    
		 */
		DOMString api;
	};
		
	/**
	 * \brief FindCallBack interface definition
	 */
	callback interface FindCallBack {
		/**
		 * \brief Asynchronous callback used whenever a new service is found.      
		 * \param service An input argument representing the found service.
		 */
		 void onFound(Service service);	  
		 
		/**
		 * \brief Asynchronous callback used whenever the state of a service change from available to unavailable.       
		 * \param service An input argument representing the lost service.
		 */
		 void onLost(Service service);
		 	  
		/**
		 * \brief Asynchronous error callback.   
		 * \param error <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a>: of type TimeoutError if the timeout timer expired, SecurityError if not authorized to use the service, AbortError if the discovery process was canceled by the application
		 */
		 void onError(DOMError error);
		  		 
	};
	
 /**
  * \brief Service state.\n
  * 
  */
	enum ServiceState {"initiating", "available", "unavailable"};
	
	/**
	 * \brief The Service interface provides an API to bind to a specific service and monitor
	 * the availability of a bound service in an asynchronous manner. The process of binding
	 * to a service involves:\n\n
	 * 1. mutual authentication between the service and the personal zone\n
	 * 2. in case of cross zone personal interworking, mutual authentication between the zones\n
	 * 3. agreement on data handling obligations as set out in the service's privacy policy\n
	 * 4. verifying access privileges and checks the need for elevated privileges\n
	 * 5. instantiate an implementation of the API that can be used by applications to request services from the requested API.\n\n
	 * Once the service object is instantiated, the service object will act as a proxy to the remote peer that will be able to invoke methods
	 * associated with API type under the window object of the remote peer. For example an application that successfully binds 
	 * to a "http://webinos.org/api/tv" API will be able to invoke methods from the remote peer as described in the code example below. 
	 *
	 * \code
	succesBindCallBack(tvService) {
		// Invoke a remote method.
		tvService.display.setChannel(channel, success);
		
		// Register an event listner from event orginating from the remote peer.
		tvService.display.addEventListener('channelchange', success);
	}  
	 * \endcode
	 */
	
	[NoInterfaceObject] interface Service {
		/**
		 * \brief Current service state. 
		 */
		readonly attribute ServiceState state;
		
		/**
	 	 * \brief API is a global unique URI identifying the type of API provided by the service. 
	 	 */
		readonly attribute DOMString api;
		
		/**
		 * \brief Id is a globally unique id representing the binding to the service. The id can be used
		 * to resume the binding again to the service without invoking the findServices process again.
		 * The id can be stored persistently to be able to resume a binding to a service across
		 * power cycles. 
		 */
		readonly attribute DOMString id;
		
		/**
		 * \brief A human readable name of the service. 
		 */
		readonly attribute DOMString displayName;
		
		/**
		 * \brief A human readable name of the device hosting the service. 
		 */
		readonly attribute DOMString serviceAddress;		
		
		/**
		 * \brief A URL referring to a detailed description of the service. 
		 */ 
		readonly attribute DOMString description;
		
		/**
		 * \brief Icon is an URL referring to an icon that represents the service. 
		 */
		readonly attribute DOMString icon;
		
		/**
		 * \brief Binds to the service uniquely identified by the service identity.  
		 * \param bindCallBack Asynchrounous callback to report the states of the bindService operation and the availability of the service.  
		 * \param serviceId Unique id of the binding to the particular service. If no serviceId is provided as an in parameter, the id attribute in the Service interface will be used to bind the service.
		 */
		void bindService(BindCallBack bindCallBack, optional DOMString serviceId);
		
		/**
		 * \brief Releases all resources and connections allocated by the service object.  
		 */
		void unbindService();
	};
	
	/**
	 * \brief Bind success callback interface definition
	 */
	 
	 callback interface BindCallBack {
		/**
		 * \brief Asynchronous success callback.       
		 * \param service An input argument representing the service.
		 */
		 void onBind(Service service);
		 
		/**
		 * \brief Asynchronous callback used when a service is unbound.      
		 * \param service An input argument representing the service.
		 */
		 void onUnbind(Service service);
		 
		/**
		 * \brief Asynchronous callback indicating that the service is available again.
		 * \param service An input argument representing the service.      
		 */		 
		 void onServiceAvailable(Service service);
		 
		/**
		 * \brief Asynchronous callback indicating the service is temporarily unavailable.
		 * \param service An input argument representing the service.
		 */		 		 
		 void onServiceUnavailable(Service service);
		 	  
		/**
		 * \brief Asynchronous error callback.   
		 * \param error DOMError (see above for definitions used by this interface). 
		 */
		 void onError(DOMError error); 
	};
	
	/**
	 * \brief Options dictionary
   	 */
	dictionary Options {
		/**
		 * \brief 	A timeout value for the findService operation in seconds between 0-65535. 
		 * 		  	Default value is 120 seconds. It is possible to disable the timeout by setting 
		 *		  	the timeout value to Number.POSITIVE_INFINITY.
		 */
		unsigned short timeout = 120;
	};
	
	/**
	 * \brief Filter dictionary
	 *\n
	 * NOTE: It is proposed that Filter should be replaced by REST-like query parameters that extends the Feature URI used as serviceType in findServices().
	 */
	dictionary Filter {
		/**
		 * \brief 	User friendly names of personal zones that will be used to search for services in addition to 
		 *			the person zone of the user logged into to the device.
		 */
		DOMString[] zoneNames;
		
		/**
		 * \brief 	If set service discovery will only return the service with the given identifier. This
		 *		  	can be used to establish a service binding directly if the service identity is already
		 * 		  	known, for example if the service identity was stored persistently for later reuse
		 *		  	or it was received via out of band.  
		 */
		DOMString serviceID;
		 
	 	/**
		 * \brief 	If remoteService is false the findServices method will limit the search for services that are  
		 *		  	connected directly to the device (including Bluetooth, NFC, etc if available) or to the same local IP network.
		 *  		If remoteServices is true, the findServices method will extend the search for services outside the local IP network
		 *  		(including other PZHs). Default value is false. 
		 */
		boolean remoteServices = false;

	 	/**
		 * \brief 	With the serviceLocation attribute it is possible to indicate where the service shall be located.
		 *			If the service location is null, the location of the service is not considered during the findServices process.  
		 */
		ServiceLocation? serviceLocation;	
	};
	
	/**
	 * \brief ServiceLocation interface 
	 */
	dictionary ServiceLocation {
		/**
		 * \brief 	The latitude attribute is the geographic coordinate specified in decimal degrees. 
		 *			If the latitude is null the latitude of the device invoking the findServices method will be used. 	
		 */
		double? latitude;

		/**
		 * \brief 	The longitude attribute is the geographic coordinate specified in decimal degrees.	
		 *			If the longitude is null the longitude of the device invoking the findServices method will be used.
		 */
		double? longitude;
		
		/**
		 * \brief 	The accuracy denotes the accuracy level of the latitude and longitude coordinates in meters.  	   	
		 *			This is used to limit the geographical area for finding services.
		 */
		double accuracy;    	    	
	};
	
	
	/**
	 * \brief Pending Operation interface 
	 */
	[NoInterfaceObject] interface PendingOperation {
		/**
		 * \brief Method Cancel
		 *
		 * Cancels the pending asynchronous discovery operation. When this method is called, the user agent must immediately bring the 
		 * operation to a stop and return. Allocated resources should be released and any ongoing related network operations should be 
		 * terminated. An error callback is issued with the DOMError name "AbortError".
		 */
		void cancel();
	};
	

	/**
	 * \brief The WebinosDiscovery interface describes the part of the Discovery
	 *        API accessible through the webinos object.
	 */
	partial interface Webinos {
  		readonly attribute DiscoveryInterface discovery;
	};