/**<p>Webinos specific extensions to <a href="http://www.w3.org/TR/widgets-apis/">W3C Widget Interface</a></p>
 * \name webinos Widget API
 *
 * This specification defines the common widget interface. The webinos application packaging
 * is based on <a href="http://www.w3.org/TR/widgets/">W3C Widget Specifications</a>, and this API completes the <a href="http://www.w3.org/TR/widgets-apis/">W3C Widget Interface</a>.
 *
 * \def-api-feature http://webinos.org/api/widget
 * Identifies the whole Widget API to be used for remote deploy requests.
 * 
 * \def-api-feature http://webinos.org/api/widget/deploy
 * Identifies access to the deploy function and whether an application is allowed to trigger deployment of child applications or not. 
 *
 * \author Andr&eacute; Paul &lt;andre.paul@fokus.fraunhofer.de&gt;
  * \version 0.9 
 */
   /**
    * \brief Callback for successfully send the Widget to background
    */
   callback HideSuccessCallback = void ();
   
   /**
    * \brief Callback called in case sending the Widget to background was not possible
    */
   callback HideErrorCallback = void ();
  
   /**
    * \brief Callback for successfull installations
    * \param childID is the application id which was used during deployChild and declared in the manifest
    * \param serviceID is the unique application instance id that can be used to explicitly address
    *                  the deployed service within webinos service discovery
    * 
   */
   callback DeploymentSuccessCallback = void (DOMString childID, DOMString serviceID);
   
   /**
    * \brief Callback for failed installations
    * \param applicationID The application ID the error relates to.
    * \param error A <a href="http://dvcs.w3.org/hg/domcore/raw-file/default/Overview.html#error-types-table">DOMError</a> explaining what failed: SecurityError if permission has been denied, NetworkError if the device is not reachable, NotFoundError if the application id is unknown, InvalidStateError if the application is already installed
   */
   callback DeploymentErrorCallback = void (DOMString applicationID, DOMError error);


  /**
   * \brief The webinos Widget Interface which extends the W3C Widget API with webinos specific extensions.
   * 
   * This API mainly introduces some more meta data attributes based on the webinos application packaging.
   * In addition this API provide a number of life cycle APIs comparable to native applications in order to
   * let an application know if it is in foreground or background.
   *
   * Also this API allows to ask for installing webinos child applications to other devices in order to allow
   * distributed applications to deploy their components on diffrent involved devices.
   *
  */
  partial interface Widget {
    
    /**
     * \brief A distributor attribute that represents people or an organization that distributed the widget.
    */
    readonly attribute DOMString     distributor;
    
    /**
     * \brief A string attribute that represents an email address associated with the distributor.
    */
    readonly attribute DOMString     distributorEmail;
    
    /**
     * \brief A string attribute that represents an email address associated with the distributor.
    */
    readonly attribute DOMString     distributorHref;
    
    /**
     * \brief A human readable version name.
    */
    readonly attribute DOMString     versionName;
    
    /**
     * \brief The validFor attributed defines a time interval until when the application is valid and can be used.
     *
     * The time frame is specified in elapsed milliseconds after the first application execution.
    */
    readonly attribute unsigned long long validFor;
    
    /**
     * \brief The validUntil attributed defines a date and time until the application is valid and can be used.
    */
    readonly attribute Date validUntil;
    
    /**
     * \brief The copyRestricted attributed defines if it is allowed to copy the application to other devices.
     *
     * If true its not allowed, if false it is allowed.
    */   
    readonly attribute boolean copyRestricted;

    /**
     * \brief The restrictedTo attributed defines copy restrictions.
     *
     * If the value is "personal-zone" it is allowed to copy the application to other devices with the personal
     * zone of the user even if copyRestricted is true
    */
    readonly attribute DOMString restrictedTo;

    /**
     * \brief Gives information about the visibility status of the Widget.
     *
     * Asks the WRT wheather the application is currently hidden (not visible to the user) or not
     * if the application is hidden and want to come to foreground it may notify an event to
     * the user using the notification API.
     *
     * \code
     * 
     * if (window.widget.isHidden){
     *    //do things, e.g., create a notification
     * };
     *
     * \endcode
    */
    readonly attribute boolean isHidden;


    /**
     * \brief Close the running application.
     *
     * Allows an application to trigger calling destroy from the runtime which results in stopping the
     * application execution and closing the application.
     *
     * \code
     * 
     * //terminate the widget by its own
     * window.widget.exit();
     *
     * \endcode
    */
    void exit();

    /**
     * \brief Hide the running application.
     *
     * Sends the application to background if possible so that it is not visible to the user anymore.
     * If possible by the platform the application execution goes on even when the application is not
     * visible anymore.
     *
     * \code
     * 
     * //the widget is not visible anymore if possible
     * window.widget.hide(
     *            function () { // i am not visible anymore },
     *            function () { // i am still visible }
     *        );
     *
     * \endcode
    */
    void hide(HideSuccessCallback onSuccess, HideErrorCallback onError);

    /**
     * \brief Event handler indicating that the application will be terminated. 
     *
     * Callback function which is called if the application will be shut down by the WRT.
     * All application memory assigned to the application will be freed after returning
     * out of this function.
     * 
    */
    attribute Function? ondestroy;

    /**
     * \brief Event handler indicating that the application has been sent to background. 
     *
     *  called after the application was put to background, e.g., another application
     * goes to foreground and the application is not visible any more. After calling onBackground the application
     * is still running but not visible anymore.
     * 
    */
    attribute Function? onbackground;

    /**
     * \brief Event handler indicating that the application is gone to foreground. 
     *
     * Application goes to foreground after previously going to background.
    */
    attribute Function? onforeground;

    /**
     * \brief EventHandler indicating that application execution is going to be stopped. 
     *
     * Application execution is stopped after returning from this function.
    */
    attribute Function? onstop;

    /**
     * \brief EventHandler indicating that application execution is continued. 
     *
     * Application execution is continued after previously stopped.
     */
    attribute Function? onstart;
    
    /**
     * \brief Requests to install an application on another device.
     *
     * Deploys a child application known to the WRT through the definition in the application s manifest
     * file on another device. If local = false or not specified the WRT has to provide a list of available
     * devices to the user where the application should be installed on, if local = true the WRT has to
     * install the selected child on the same device as the API is bound to.
     *
     * To install a child on a selected remote device the webinos device discovery API can be used to find
     * available Widget API services on other devices where deployChild can be used remotely. Remote instances
     * of the widget API will also provide Widget details of the running application and nothing about any
     * application on remote devices. Thus, the only difference in using the Widget API directly or via a
     * remote service is that deployChild will be targeted on another device. 
     *
     * \code
     *
     * function error(){ 
     *   //installation failed
     * }
     *
     * function success(childID, serviceID){
     *   //application was successfully deployed
     *   //serviceID can be used for discovery to bind directly to this application
     *   //if functions are exposed by the application
     * }
     *
     * //installing child application with name child1.wgt on the same device 
     * window.widget.deployChild(success, error, "child1.wgt", true);
     *
     * \endcode
     *
     * \param onSuccess SuccessCallback called after successfull installation.
     * \param onError ErrorCallback called if installation was not possible.
     * \param childApplicationID the application ID of the child package to be installed.
     * \param local Indicates if application should be installed on the same device as the requesting application or not.
    */
    void deployChild(DeploymentSuccessCallback onSuccess, DeploymentErrorCallback onError, DOMString childApplicationID, optional boolean local);
  };
  
